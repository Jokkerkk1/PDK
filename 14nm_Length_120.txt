//CELLB
Q: (CELLB OR DMCB1) vertical edge length = 0.048+0.048*num
A: 
CELLB_L_1 {
@ (CELLB OR DMCB1) vertical edge length = 0.048+0.048*num
 err1 = LENGTH CELLB_ALL_v_edges < 0.048
 err1 NOT INSIDE EDGE SealR_NOT_BULK

 err2 = DFM PROPERTY CELLB_ALL_v_edges [-= ABS(REMAINDER((LENGTH(CELLB_ALL_v_edges) - 0.048),0.048))] > 0
 err2 NOT INSIDE EDGE SealR_NOT_BULK
}


//AA

Q: (AOP_AA AND FIN) length in S/D direction = 0.09~105um
A: 
AA_L_2 {
@ (AOP_AA AND FIN) length in S/D direction = 0.09~105um
 err1 = LENGTH AOP_AA_h_edges < 0.09
 err2 = LENGTH AOP_AA_h_edges > 105
 err3 = (AOP_AA AND FIN) ENCLOSE RECTANGLE 0.001 105+GLOBAL_TOLERANCE ORTHOGONAL ONLY
 err1 NOT INSIDE EDGE SealR_NOT_BULK
 err2 NOT INSIDE EDGE SealR_NOT_BULK
 err3 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: (DOP_AA AND FIN) length in S/D direction = 0.09~11um
A: 
AA_L_3 {
@ (DOP_AA AND FIN) length in S/D direction = 0.09~11um
 err1 = LENGTH (DOP_AA COIN EDGE AOP_AA_h_edges) < 0.09
 err2 = LENGTH (DOP_AA COIN EDGE AOP_AA_h_edges) > 11
 err3 = (DOP_AA AND FIN) ENCLOSE RECTANGLE 0.001 11+GLOBAL_TOLERANCE ORTHOGONAL ONLY
 err1 NOT INSIDE EDGE SealR_NOT_BULK
 err2 NOT INSIDE EDGE SealR_NOT_BULK
 err3 NOT INSIDE EDGE SealR_NOT_BULK
}

AA_048_rectangle = AA_RECTANGLE AND AA_048
AA_048_rectangle_h_edges = ANGLE AA_048_rectangle == 0

Q: AA horizontal edge length between two consecutive 90-270 degree corners >= 0.27um
A: 
AA_L_4 {
@ AA horizontal edge length between two consecutive 90-270 degree corners >= 0.27um
 err1 = LENGTH (ANGLE AA_convex_90_270_edge == 0) < 0.27
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: AA vertical edge length between two consecutive 270-90 degree corners <= 0.384um
A: 
AA_L_5 {
@ AA vertical edge length between two consecutive 270-90 degree corners <= 0.384um
 err1 = LENGTH (ANGLE AA_convex_90_270_edge == 90) > 0.384
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: AA horizontal edge length between two consecutive 270-270 degree corners >= 0.27um
A: 
AA_L_6 {
@ AA horizontal edge length between two consecutive 270-270 degree corners >= 0.27um
 err1 = LENGTH (ANGLE AA_convex_270_270_edge == 0) < 0.27
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: Non-rectangle AA horizontal edge length between two consecutive 90-90 degree corners, except LDBK region >= 0.18um
A: 
AA_L_7 {
@ Non-rectangle AA horizontal edge length between two consecutive 90-90 degree corners, except LDBK region >= 0.18um
 err1_RAW = LENGTH (ANGLE AA_convex_90_90_edge == 0) < 0.18
 err1 = (EXPAND EDGE err1_RAW INSIDE BY 0.001) WITH EDGE AA_convex_90_270_edge
 err1 NOT INSIDE LDBK
}

//AR

Q: AR length in GATE poly direction, except OCOVL region >= 0.24um
A: 
AR_L_1 {
@ AR length in GATE poly direction, except OCOVL region >= 0.24um
 err1 = LENGTH AR_v_edges < 0.240
 err1 NOT INSIDE EDGE OCOVL
}

Q: Length of (ALL_AR AND ((ALL_AA with vertical edge extend 1/2 GT width) horizontal edge extend 0.12um)) in GATE poly direction <= 52um
A: 
AR_L_2 {
@ Length of (ALL_AR AND ((ALL_AA with vertical edge extend 1/2 GT width) horizontal edge extend 0.12um)) in GATE poly direction <= 52um
 check_AREA = (EXPAND EDGE ALL_AA_h_edges OUTSIDE BY 0.12 EXTEND BY 0.010) OR ALL_AA
 err1 = (ALL_AR AND check_AREA) ENCLOSE RECTANGLE 0.0001 52+GLOBAL_TOLERANCE ORTHOGONAL ONLY
 err1 NOT INSIDE SealR_NOT_BULK
}



//GT

Q: Maximum (GT NOT P2) (GT width <= 0.032um) length between two M0Gs, as well as the length from any point inside GATE to the nearest M0G when the GT width <= 0.032um, except ESDMK1, ESDIO1 and ESDIO2 regions <= 10.5um
A: 
GT_L_1 {
@ Maximum (GT NOT P2) (GT width <= 0.032um) length between two M0Gs, as well as the length from any point inside GATE to the nearest M0G when the GT width <= 0.032um, except ESDMK1, ESDIO1 and ESDIO2 regions <= 10.5um
//;dummy GT without M0G or gate is ok
 except_region = OR ESDMK1 ESDIO_all
 tar_gt = (GT_0 AND GT_eqlt_032) NOT INSIDE except_region
 X1 = tar_gt OUTSIDE EDGE M0G
 X2 = INT X1 <= 0.032 OPPOSITE REGION
 X3 = X2 ENCLOSE RECTANGLE 10.5+GLOBAL_TOLERANCE 0.002 ORTHOGONAL ONLY
 err1 = (X3 INTERACT M0G == 2) NOT INTERACT GATE
 err1 NOT INSIDE except_region

 tar_gate = GATE NOT INSIDE except_region
 tar_gate_032 = (GT_0 AND GT_eqlt_032) NOT INSIDE except_region
 tar_gate_chk = tar_gate_032 ENCLOSE RECTANGLE 10.5+GLOBAL_TOLERANCE 0.002 ORTHOGONAL ONLY

 Y0_input = tar_gate_chk INTERACT tar_gate
 Y0_step1 = M0G AND Y0_input
 Y0_good1 = tar_gate INTERACT Y0_input

//;sizing operations are splitted into 9 steps
 Y1_input = COPY Y0_input
 Y1_step1 = SIZE Y0_step1 BY 1 INSIDE OF Y1_input STEP 0.10 //;based on GT.S.1 and M0G.EX.1
 Y1_good1 = Y0_good1 NOT INSIDE Y1_step1   //;step1: 1.00um

 Y2_input = Y1_input INTERACT Y1_good1
 Y2_step1 = SIZE Y1_step1 BY 1 INSIDE OF Y2_input STEP 0.10
 Y2_good1 = Y1_good1 NOT INSIDE Y2_step1   //;step2: 1.00um

 Y3_input = Y2_input INTERACT Y2_good1
 Y3_step1 = SIZE Y2_step1 BY 1 INSIDE OF Y3_input STEP 0.10
 Y3_good1 = Y2_good1 NOT INSIDE Y3_step1   //;step3: 1.00um

 Y4_input = Y3_input INTERACT Y3_good1
 Y4_step1 = SIZE Y3_step1 BY 1 INSIDE OF Y4_input STEP 0.10
 Y4_good1 = Y3_good1 NOT INSIDE Y4_step1   //;step4: 1.00um

 Y5_input = Y4_input INTERACT Y4_good1
 Y5_step1 = SIZE Y4_step1 BY 1 INSIDE OF Y5_input STEP 0.10
 Y5_good1 = Y4_good1 NOT INSIDE Y5_step1   //;step5: 1.00um

 Y6_input = Y5_input INTERACT Y5_good1
 Y6_step1 = SIZE Y5_step1 BY 1 INSIDE OF Y6_input STEP 0.10
 Y6_good1 = Y5_good1 NOT INSIDE Y6_step1   //;step6: 1.00um

 Y7_input = Y6_input INTERACT Y6_good1
 Y7_step1 = SIZE Y6_step1 BY 1 INSIDE OF Y7_input STEP 0.10
 Y7_good1 = Y6_good1 NOT INSIDE Y7_step1   //;step7: 1.00um

 Y8_input = Y7_input INTERACT Y7_good1
 Y8_step1 = SIZE Y7_step1 BY 1 INSIDE OF Y8_input STEP 0.10
 Y8_good1 = Y7_good1 NOT INSIDE Y8_step1   //;step8: 1.00um

 Y9_input = Y8_input INTERACT Y8_good1
 Y9_step1 = SIZE Y8_step1 BY 2.5 INSIDE OF Y9_input STEP 0.10
 Y9_good1 = Y8_good1 NOT INSIDE Y9_step1   //;step9: 2.50um
 err2 = Y9_good1 NOT Y9_step1
 err2 NOT INSIDE except_region
}

Q: AOP_GT length (width < 0.07um), except DMCMK1 region >= 0.246um
A: 
GT_L_2 {
@ AOP_GT length (width < 0.07um), except DMCMK1 region >= 0.246um
 err1 = AOP_GT_lt_070 NOT (AOP_GT_lt_070 ENCLOSE RECTANGLE 0.002 0.246 ORTHOGONAL ONLY)
 err1 NOT INSIDE DMCMK1
}

Q: AOP_GT length (width >= 0.07um), except DMCMK1 region >= 0.225um
A: 
GT_L_3 {
@ AOP_GT length (width >= 0.07um), except DMCMK1 region >= 0.225um
 err1 = AOP_GT_eqgt_070 NOT (AOP_GT_eqgt_070 ENCLOSE RECTANGLE 0.002 0.225 ORTHOGONAL ONLY)
 err1 NOT INSIDE DMCMK1
}

Q: AOP_GT jog length (jog width <= 0.004um) >= 0.24um
A: 
GT_L_4 {
@ AOP_GT jog length (jog width <= 0.004um) >= 0.24um
 edge_waive = CONVEX EDGE AOP_GT ANGLE1 == 90 LENGTH1 >= 0.24 ANGLE2 == 270 LENGTH2 >= 0.24 WITH LENGTH <= 0.004
 edge_check = LENGTH AOP_GT_convex_90_270_edge <= 0.004
 err1 = edge_check NOT COIN EDGE edge_waive
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: Length of ((ALL_GT NOT P2) INTERACT ALL_AA), except DMPNP, VARMOS region <= 10.5um
A: 
GT_L_6 {
@ Length of ((ALL_GT NOT P2) INTERACT ALL_AA), except DMPNP, VARMOS region <= 10.5um
 chk_ALL_GT = ALL_GT_NOT_P2 INTERACT ALL_AA
 err1 = chk_ALL_GT ENCLOSE RECTANGLE 0.002 10.5+GLOBAL_TOLERANCE ORTHOGONAL ONLY
 err1 NOT INSIDE (OR DMPNP VARMOS)
}

Q: Length of ((ALL_GT (width >= 0.032um) NOT ALL_P2) INTERACT ALL_AA), except DMPNP, VARMOS, LDBK and DMC1 regions <= 1.6um
A: 
GT_L_7 {
@ Length of ((ALL_GT (width >= 0.032um) NOT ALL_P2) INTERACT ALL_AA), except DMPNP, VARMOS, LDBK and DMC1 regions <= 1.6um
 chk_ALL_GT = (ALL_GT_eqgt_032 NOT ALL_P2) INTERACT ALL_AA
 err1 = chk_ALL_GT ENCLOSE RECTANGLE 0.002 1.6+GLOBAL_TOLERANCE ORTHOGONAL ONLY
 err1 NOT INSIDE (OR DMPNP VARMOS LDBK DMC1)
}


//GTDMP

Q: GTDMP length (width < 0.07um) >= 0.246um
A: 
GTDMP_L_1 {
@ GTDMP length (width < 0.07um) >= 0.246um
 err1 = LENGTH (INT [GTDMP] < 0.07 OPPOSITE) < 0.246
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: GTDMP length (width >= 0.07um) >= 0.225um
A: 
GTDMP_L_2 {
@ GTDMP length (width >= 0.07um) >= 0.225um
 chk_DOP_GT = RECTANGLE GTDMP >= 0.07 BY >= 0.072
 good_DOP_GT = RECTANGLE GTDMP >= 0.07 BY >= 0.225
 err1 = chk_DOP_GT NOT good_DOP_GT
 err1 NOT INSIDE SealR_NOT_BULK
}

//P2

Q: P2 edge length in S/D direction >= 0.09um
A: 
P2_L_1 {
@ P2 edge length in S/D direction >= 0.09um
 err1 = LENGTH P2_h_edges < 0.09
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: P2 edge length (width >= 0.108um) in S/D direction, except OCOVL region >= 0.166um
A:
P2_L_2 {
@ P2 edge length (width >= 0.108um) in S/D direction, except OCOVL region >= 0.166um
 err1 = LENGTH P2_W_eqgt_108_edges < 0.166
 err1 NOT INSIDE EDGE OCOVL
}

//M0GDMP

Q: M0GDMP length (width = 0.04um) = 0.102~0.292um
A:
M0GDMP_L_1 {
@ M0GDMP length (width = 0.04um) = 0.102~0.292um
 err1 = LENGTH (INT [M0GDMP] == 0.040 ABUT<90 OPPOSITE) < 0.102  //;based on M0GDMP.W.1
 err2 = LENGTH M0GDMP_040_L_edges > 0.292
 err1 NOT INSIDE EDGE SealR_NOT_BULK
 err2 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: M0GDMP length (width = 0.05um) = 0.05um
A: 
M0GDMP_L_2 {
@ M0GDMP length (width = 0.05um) = 0.05um
 err1 = LENGTH (INT [M0GDMP] == 0.05 ABUT<90 OPPOSITE) != 0.05  //;based on M0GDMP.W.1
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: M0GDMP length (width = 0.06um) >= 0.198um
A: 
M0GDMP_L_3 {
@ M0GDMP length (width = 0.06um) >= 0.198um
 err1 = LENGTH (INT [M0GDMP] == 0.060 ABUT<90 OPPOSITE) < 0.198  //;based on M0GDMP.W.1
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

//M0

Q: M0 length (width = 0.04um), except (M0 interact TRCMK) and OCOVL region >= 0.114um
A: 
M0_L_1 {
@ M0 length (width = 0.04um), except (M0 interact TRCMK) and OCOVL region >= 0.114um
 CHK_M0 = M0 NOT INTERACT TRCMK
 err1 = LENGTH (INT [CHK_M0] == 0.04 OPPOSITE) < 0.04
 err2 = LENGTH (M0_040 INTERACT CHK_M0) > 0.04 < 0.114
 err3 = RECTANGLE CHK_M0 ASPECT == 1
 err1 NOT INSIDE EDGE OCOVL
 err2 NOT INSIDE EDGE OCOVL
 err3 NOT INSIDE OCOVL
}

Q: M0 length (width = 0.042um), except OCOVL region >= 0.158um
A: 
M0_L_1a {
@ M0 length (width = 0.042um), except OCOVL region >= 0.158um
 err1 = LENGTH (INT [M0] == 0.042 OPPOSITE) < 0.042
 err2 = LENGTH M0_042 > 0.042 < 0.158
 err3 = COPY (RECTANGLE M0 ASPECT == 1)
 err1 NOT INSIDE EDGE OCOVL
 err2 NOT INSIDE EDGE OCOVL
 err3 NOT INSIDE OCOVL
}

Q: M0 length (width = 0.054um) >= 0.158um
A: 
M0_L_2 {
@ M0 length (width = 0.054um) >= 0.158um
 err1 = LENGTH (INT [M0] == 0.054 OPPOSITE) < 0.054
 err2 = LENGTH M0_054 > 0.054 < 0.158
 err3 = RECTANGLE M0_054 ASPECT == 1
 err1 NOT INSIDE EDGE SealR_NOT_BULK
 err2 NOT INSIDE EDGE SealR_NOT_BULK
 err3 NOT INSIDE SealR_NOT_BULK
}

Q: M0 length (width = 0.04um, space = 0.063/0.066um) >= 0.158um
A:
M0_L_3 {
@ M0 length (width = 0.04um, space = 0.063/0.066um) >= 0.158um
 sps_066 = EXT [M0_040] == 0.066 OPPOSITE
 sps_063 = EXT [M0_040] == 0.063 OPPOSITE
 chk_040_M0 = (M0_040 WITH EDGE sps_066) OR (M0_040 WITH EDGE sps_063)

 err1 = LENGTH chk_040_M0 > 0.04 < 0.158
 err2 = RECTANGLE chk_040_M0 ASPECT == 1 ORTHOGONAL ONLY
 err1 NOT INSIDE EDGE SealR_NOT_BULK
 err2 NOT INSIDE SealR_NOT_BULK
}

M0C_M0CDMP_054 = DMP_M0C WITH WIDTH == 0.054
M0C_M0CDMP_052 = DMP_M0C WITH WIDTH == 0.052
AOP_M0_OPP_040 = INT AOP_M0 == 0.04 OPPOSITE REGION
AOP_M0_OPP_040_042 = (INT AOP_M0 == 0.04 OPPOSITE REGION) OR (INT AOP_M0 == 0.042 OPPOSITE REGION)
M0_NOT_M0C_NOT_INTERACT_AA = ((AOP_M0_OPP_040_042 INTERACT M0C_M0CDMP_052) NOT M0C_M0CDMP_052) NOT INTERACT ALL_AA

Q: Length of (AOP_M0 NOT (M0C OR M0CDMP)) (AOP_M0 width = 0.04/0.042um), except INST region and ((AOP_M0 (width = 0.04/0.042um) NOT (M0C OR M0CDMP) (width = 0.052um)) NOT INTERACT ALL_AA), except RSPMK1 region >= 0.061um
A: 
M0_L_4 {
@ Length of (AOP_M0 NOT (M0C OR M0CDMP)) (AOP_M0 width = 0.04/0.042um), except INST region and ((AOP_M0 (width = 0.04/0.042um) NOT (M0C OR M0CDMP) (width = 0.052um)) NOT INTERACT ALL_AA), except RSPMK1 region >= 0.061um
 waive_area = OR INST RSPMK1
 m0_RAW = (AOP_M0_NOT_M0C AND AOP_M0_OPP_040_042) NOT M0CDMP
 m0_CHK = m0_RAW NOT M0_NOT_M0C_NOT_INTERACT_AA
 m0_EXC = ((EXPAND EDGE (LENGTH (AOP_M0_OPP_040_042 NOT M0C) == M0C_VerSpace_inPowerRail) OUTSIDE BY 0.001) INTERACT M0C == 2) INSIDE RSPMK_ALL  //M0C space = 0.014 is allowed in power rail

 err1 = LENGTH (m0_CHK NOT COIN OUTSIDE EDGE m0_EXC) < 0.04
 err2 = LENGTH (ANGLE m0_CHK == 90) > 0.04 < 0.061
 err3 = RECTANGLE m0_CHK ASPECT == 1
 err1 NOT INSIDE EDGE waive_area
 err2 NOT INSIDE EDGE waive_area
 err3 NOT INSIDE waive_area
}

Q: Length of (AOP_M0 NOT AOP_M0C) (AOP_M0 width = 0.04/0.042um) <= 5.1um
A:
M0_L_5 {
@ Length of (AOP_M0 NOT AOP_M0C) (AOP_M0 width = 0.04/0.042um) <= 5.1um
 err1 = LENGTH (AOP_M0_NOT_AOP_M0C INTERACT AOP_M0_040_042) > 5.1
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

//M0C


Q: AOP_M0C edge length in S/D direction >= 0.09um
A: 
M0C_L_1 {
@ AOP_M0C edge length in S/D direction >= 0.09um
 err1 = LENGTH AOP_M0C_h_edges < 0.090
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: AOP_M0C (width = 0.048um) edge length in S/D direction, except INST region >= 0.36um
A: 
M0C_L_2 {
@ AOP_M0C (width = 0.048um) edge length in S/D direction, except INST region >= 0.36um
 err1 = LENGTH (ANGLE AOP_M0C_048 == 0) < 0.36
 err1 NOT INSIDE EDGE INST
}

Q: AOP_M0C (width = 0.052um) edge length in S/D direction >= 0.18um
A:
M0C_L_3 {
@ AOP_M0C (width = 0.052um) edge length in S/D direction >= 0.18um
 err1 = LENGTH (ANGLE AOP_M0C_052 == 0) < 0.18
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: AOP_M0C edge length in S/D direction (AOP_M0C width = 0.082/0.108um, INTERACT AOP_M0 (width = 0.054um)) >= 0.36um
A: 
M0C_L_4 {
@ AOP_M0C edge length in S/D direction (AOP_M0C width = 0.082/0.108um, INTERACT AOP_M0 (width = 0.054um)) >= 0.36um
 err1 = LENGTH (ANGLE (AOP_M0C_082 INTERACT AOP_M0_054) == 0) < 0.36
 err2 = LENGTH (ANGLE (AOP_M0C_108 INTERACT AOP_M0_054) == 0) < 0.36
 err1 NOT INSIDE EDGE SealR_NOT_BULK
 err2 NOT INSIDE EDGE SealR_NOT_BULK
}

M0C_051_h_edges = ANGLE M0C_051 == 0
M0C_042_h_edges = ANGLE M0C_042 == 0
M0C_whole_M0C_051_h_edges = M0C TOUCH EDGE M0C_051_h_edges
M0C_whole_M0C_042_h_edges = M0C TOUCH EDGE M0C_042_h_edges

Q: M0C (width = 0.051um) length in S/D direction, except GT_P96 region = 0.090*(n+1)um
A:
M0C_L_5 {
@ M0C (width = 0.051um) length in S/D direction, except GT_P96 region = 0.090*(n+1)um
 err1 = LENGTH M0C_whole_M0C_051_h_edges < 0.09
 err1 NOT INSIDE EDGE GT_P96

 err2 = DFM PROPERTY M0C_whole_M0C_051_h_edges M0C OVERLAP ABUT ALSO MULTI [-= ABS(REMAINDER((LENGTH(M0C_whole_M0C_051_h_edges) - 0.09), 0.09))] > 0
 err2 NOT INSIDE EDGE GT_P96
}

Q: AOP_M0C (width = 0.051um) length in S/D direction INSIDE GT_P96 region = 0.096*(n+1)um
A: 
M0C_L_5a {
@ AOP_M0C (width = 0.051um) length in S/D direction INSIDE GT_P96 region = 0.096*(n+1)um
 chk_M0 = AOP_M0C_051 COIN EDGE AOP_M0C_h_edges
 err1 = (LENGTH chk_M0 < 0.096) NOT OUTSIDE EDGE GT_P96
 err1 NOT INSIDE EDGE SealR_NOT_BULK

 err2 = DFM PROPERTY chk_M0 AOP_M0C GT_P96 OVERLAP ABUT ALSO MULTI [-= ABS(REMAINDER((LENGTH(chk_M0) - 0.096), 0.096))] > 0 [+= count(GT_P96)] > 0
 err2 NOT INSIDE EDGE SealR_NOT_BULK
}

DOP_M0C_400_h_edges = ANGLE DOP_M0C_400 == 0
DOP_M0C_360_h_edges = ANGLE DOP_M0C_360 == 0
DOP_M0C_400_v_edges = ANGLE DOP_M0C_400 == 90
DOP_M0C_360_v_edges = ANGLE DOP_M0C_360 == 90

Q: DOP_M0C (width = 0.36um) edge length in S/D direction = 0.18um
A: 
M0C_L_6 {
@ DOP_M0C (width = 0.36um) edge length in S/D direction = 0.18um
 err1 = LENGTH DOP_M0C_360_h_edges != 0.18
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}


//M0G

Q: AOP_M0G (width = 0.04um) length, except INST region = 0.102~0.33um
A:
M0G_L_1 {
@ AOP_M0G (width = 0.04um) length, except INST region = 0.102~0.33um
 err1 = OR (AOP_M0G_WIDTH_040 NOT WITH EDGE (LENGTH AOP_M0G >= 0.102 <= 0.33)) ((AOP_M0G WITH EDGE (LENGTH AOP_M0G == 0.040)) WITH EDGE (LENGTH AOP_M0G < 0.040))
 err1 NOT INSIDE INST
}

Q: M0G.L.2: M0G (width = 0.05um) length (in S/D direction), except GT_P96 region = 0.050, 0.057~0.058um
    M0G.L.2a: M0G (width = 0.05um) length (in S/D direction), inside GT_P96 = 0.050, 0.060~0.061um
    M0G.L.2b: AOP_M0G (width = 0.05um) length, except 0.05*(0.057~0.058)um and 0.05*(0.06~0.061)um M0G = 0.05um
A: 
M0G_L_2_2_1 {
@ M0G.L.2: M0G (width = 0.05um) length (in S/D direction), except GT_P96 region = 0.050, 0.057~0.058um
@ M0G.L.2a: M0G (width = 0.05um) length (in S/D direction), inside GT_P96 = 0.050, 0.060~0.061um
@ M0G.L.2b: AOP_M0G (width = 0.05um) length, except 0.05*(0.057~0.058)um and 0.05*(0.06~0.061)um M0G = 0.05um
 good_GTP90 = (M0G_050_VERTICAL WITH EDGE (OR EDGE (LENGTH M0G_h_edges == 0.050) (LENGTH M0G_h_edges >= 0.057 <= 0.058))) NOT INSIDE GT_P96
 good_GTP96 = (M0G_050_VERTICAL WITH EDGE (OR EDGE (LENGTH M0G_h_edges == 0.050) (LENGTH M0G_h_edges >= 0.060 <= 0.061))) NOT OUTSIDE GT_P96
 good_DUM_M0G = (AOP_M0G_050 NOT M0G_050) NOT WITH EDGE (LENGTH AOP_M0G != 0.050)
 err1 = M0G_050_VERTICAL NOT (OR good_GTP90 good_GTP96)  //;based on M0G.R.2a
 err2 = (AOP_M0G_050 NOT M0G_050) NOT good_DUM_M0G
 err1 NOT INSIDE SealR_NOT_BULK
 err2 NOT INSIDE SealR_NOT_BULK
}

Q: AOP_M0G (width = 0.06um) length, except length = 0.148~200um M0G inside RESP1 = 0.095~0.096, 0.198~200um
A: 
M0G_L_3 {
@ AOP_M0G (width = 0.06um) length, except length = 0.148~200um M0G inside RESP1 = 0.095~0.096, 0.198~200um
 WAIVE_AREA = (M0G_WIDTH_060 WITH EDGE (LENGTH AOP_M0G >= 0.148 <= 200)) INSIDE RESP1
 err1 = (AOP_M0G_WIDTH_060 NOT WAIVE_AREA) NOT WITH EDGE ((LENGTH AOP_M0G >= 0.095 <= 0.096) OR EDGE (LENGTH AOP_M0G >= 0.198 <= 200))
 err1 NOT INSIDE SealR_NOT_BULK
}

Q: M0G.L.4: M0G (width = 0.088um) length (in S/D direction), except GT_P96 region = 0.102~0.104um
    M0G.L.5: M0G (width = 0.088um) length (in S/D direction), inside GT_P96 = 0.108~0.110um
A: 
M0G_L_4_4_1 {
@ M0G.L.4: M0G (width = 0.088um) length (in S/D direction), except GT_P96 region = 0.102~0.104um
@ M0G.L.5: M0G (width = 0.088um) length (in S/D direction), inside GT_P96 = 0.108~0.110um
 good_GTP90 = (M0G_088_VERTICAL WITH EDGE (OR EDGE (LENGTH M0G_h_edges == 0.051) (LENGTH M0G_h_edges >= 0.102 <= 0.104))) NOT INSIDE GT_P96
 good_GTP96 = (M0G_088_VERTICAL WITH EDGE (OR EDGE (LENGTH M0G_h_edges == 0.054) (LENGTH M0G_h_edges >= 0.108 <= 0.110))) NOT OUTSIDE GT_P96
 err1 = (M0G_088_VERTICAL NOT good_GTP90) NOT good_GTP96
 err2 = INT M0G_v_edges == 0.088 OPPOSITE REGION EXCLUDE SHIELDED  //;based on M0G.R.2a/2b
 err1 NOT INSIDE SealR_NOT_BULK
 err2 NOT INSIDE SealR_NOT_BULK
}

AOP_M0G_v_edges_eq_090 = LENGTH AOP_M0G_v_edges == 0.090
AOP_M0G_v_edges_eq_091 = LENGTH AOP_M0G_v_edges == 0.091
AOP_M0G_v_edges_eq_065 = LENGTH AOP_M0G_v_edges == 0.065

Q: AOP_M0G (width = 0.051~0.055um) length in GATE poly direction = 0.09~0.091um
A:
M0G_L_6 {
@ AOP_M0G (width = 0.051~0.055um) length in GATE poly direction = 0.09~0.091um
 err1 = (INT AOP_M0G_v_edges >= 0.051 <= 0.055 OPPOSITE REGION) NOT WITH EDGE (OR EDGE AOP_M0G_v_edges_eq_090 AOP_M0G_v_edges_eq_091)
 err2 = INT M0G_h_edges >= 0.051 <= 0.055 OPPOSITE REGION  //; based on M0G.R.2b
 err1 NOT INSIDE SealR_NOT_BULK
 err2 NOT INSIDE SealR_NOT_BULK
}

//RV0

Q: RV0.W.1: Rectangular V0 width, except OCOVL, MARKS and MARKG region = 0.032um
    RV0.L.1: Rectangular V0 length, except OCOVL, MARKS and MARKG region = 0.080um
A: 
RV0_W_1_L_1 {
@ RV0.W.1: Rectangular V0 width, except OCOVL, MARKS and MARKG region = 0.032um
@ RV0.L.1: Rectangular V0 length, except OCOVL, MARKS and MARKG region = 0.080um
 WAIVE_AREA = OR MARKS_MARKG_INDMY_LOGO OCOVL
 err1 = (V0 NOT RV0) NOT V0N
 err1 NOT INSIDE WAIVE_AREA
}

Q: V0 bar length (width = 0.1um) >= 0.35um
A: 
RV0_L_2 {
@ V0 bar length (width = 0.1um) >= 0.35um
 err1 = LENGTH (INT [V0_BAR_100] == 0.1 OPPOSITE) < 0.35
 err1 NOT INSIDE EDGE SealR_NOT_BULK

 check_VIA = V0 INSIDE MARKS_MARKG_INDMY_LOGO
 check_EDG = INT [check_VIA] == 0.1 ABUT<90 OPPOSITE ANGLED==0
 err2 = LENGTH check_EDG < 0.35
 err2 NOT INSIDE EDGE SealR_NOT_BULK
}

//M1

Q: M1 branch length when M1 branch width >= 0.065um and <= 0.269um, and connected to M1 plate with both width and length >= 0.27um
    DRC waive the branch that can enclose at least one (0.005um*design value) orthogonal rectangle >= 0.139um
A: 
M1_L_1 {
@ M1 branch length when M1 branch width >= 0.065um and <= 0.269um, and connected to M1 plate with both width and length >= 0.27um
@ DRC waive the branch that can enclose at least one (0.005um*design value) orthogonal rectangle >= 0.139um
 // based on M1.W.5
 dorian_large = M1 WITH WIDTH >= 0.27
 dorian_whole = M1 INTERACT dorian_large
 dorian_large_ep = SIZE dorian_large BY 0.005 INSIDE OF dorian_whole
 dorian_branch_1 = M1 WITH WIDTH >= 0.065 < 0.27
 dorian_branch_2 = dorian_branch_1 NOT OUTSIDE dorian_large_ep
 dorian_branch_3 = ENCLOSE RECTANGLE dorian_branch_2 0.005 0.139 ORTHOGONAL ONLY
 err1 = dorian_branch_2 NOT dorian_branch_3
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: M1 branch length when M1 branch width >= 0.065um and <= 0.269um, and connected to M1 plate with both width and length >= 0.542um
    DRC waive the branch that can enclose at least one (0.005um* design value) orthogonal rectangle >= 0.248um
A: 
M1_L_2 {
@ M1 branch length when M1 branch width >= 0.065um and <= 0.269um, and connected to M1 plate with both width and length >= 0.542um
@ DRC waive the branch that can enclose at least one (0.005um* design value) orthogonal rectangle >= 0.248um
 // based on M1.W.5
 dorian_large = M1 WITH WIDTH >= 0.542
 dorian_whole = M1 INTERACT dorian_large
 dorian_large_ep = SIZE dorian_large BY 0.005 INSIDE OF dorian_whole
 dorian_branch_1 = M1 WITH WIDTH >= 0.065 < 0.27
 dorian_branch_2 = dorian_branch_1 NOT OUTSIDE dorian_large_ep
 dorian_branch_3 = ENCLOSE RECTANGLE dorian_branch_2 0.005 0.248 ORTHOGONAL ONLY
 err1 = dorian_branch_2 NOT dorian_branch_3
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: M1 branch length when M1 branch width >= 0.065um and <= 0.269um, and connected to M1 plate with both width and length >= 1um
    DRC waive the branch that can enclose at least one (0.005um* design value) orthogonal rectangle >= 0.495um
A:
M1_L_3 {
@ M1 branch length when M1 branch width >= 0.065um and <= 0.269um, and connected to M1 plate with both width and length >= 1um
@ DRC waive the branch that can enclose at least one (0.005um* design value) orthogonal rectangle >= 0.495um
 // based on M1.W.5
 dorian_large = M1 WITH WIDTH >= 1.00
 dorian_whole = M1 INTERACT dorian_large
 dorian_large_ep = SIZE dorian_large BY 0.005 INSIDE OF dorian_whole
 dorian_branch_1 = M1 WITH WIDTH >= 0.065 < 0.27
 dorian_branch_2 = dorian_branch_1 NOT OUTSIDE dorian_large_ep
 dorian_branch_3 = ENCLOSE RECTANGLE dorian_branch_2 0.005 0.495 ORTHOGONAL ONLY
 err1 = dorian_branch_2 NOT dorian_branch_3
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: M1 edge length with adjacent edge < 0.032um
    (these two edges formed by 3 consecutive 270-90-270 degree inner angles,
    DRC don't flag if there is M1 within the area formed by 0.125um extension from these two edges and vertex >= 0.063um)
A: 
M1_L_4 {
@ M1 edge length with adjacent edge < 0.032um
@ (these two edges formed by 3 consecutive 270-90-270 degree inner angles,
@ DRC don't flag if there is M1 within the area formed by 0.125um extension from these two edges and vertex >= 0.063um)
 L1 = CONVEX EDGE M1 ANGLE1 == 90 ANGLE2 == 270 WITH LENGTH < 0.032
 L2 = CONVEX EDGE M1 ANGLE1 == 90 ANGLE2 == 270 WITH LENGTH < 0.063
 L3_corner = INT L1 L2 < 0.005 ABUT==90 INTERSECTING ONLY REGION
 L1_c_edge = L1 TOUCH EDGE L3_corner
 L2_c_edge = L2 TOUCH EDGE L3_corner
 L1_c_s125 = EXPAND EDGE L1_c_edge OUTSIDE BY 0.125
 L2_c_s125 = EXPAND EDGE L2_c_edge OUTSIDE BY 0.125
 // 
 SQ_corner_raw = (EXT L1_c_s125 L2_c_s125 < 0.125 ABUT==90 INTERSECTING ONLY REGION EXTENTS) NOT INSIDE M1
 SQ_corner = (SQ_corner_raw NOT COIN EDGE L1_c_s125) NOT COIN EDGE L2_c_s125
 // 
 RM_step_1 = INT SQ_corner <= 0.586*0.125 ABUT==90 INTERSECTING ONLY REGION
 SQ_step_1 = SQ_corner_raw NOT RM_step_1
 RM_step_2 = INT SQ_step_1 <= 0.215*0.125 ABUT>134.8 <135.2 INTERSECTING ONLY REGION
 SQ_step_2 = SQ_step_1 NOT RM_step_2
 SQ_step_3 = (SQ_step_2 OR L1_c_s125) OR L2_c_s125
 SQ_real = SQ_step_3 NOT INTERACT (SQ_step_3 AND M1)
 err1_TMP = L3_corner TOUCH SQ_real
 err1 = EXPAND EDGE (M1 TOUCH EDGE err1_TMP) INSIDE BY 0.001
 err1 NOT INSIDE SealR_NOT_BULK
}

M1_end_L_5_6 = CONVEX EDGE M1 ANGLE1 == 90 ANGLE2 == 90 WITH LENGTH <= 0.051
M1_convex_90_270_lt_032 = CONVEX EDGE M1 ANGLE1 == 90 ANGLE2 == 270 WITH LENGTH < 0.032
M1_convex_90_270_lt_045 = CONVEX EDGE M1 ANGLE1 == 90 ANGLE2 == 270 WITH LENGTH < 0.045
M1_convex_90_270_lt_046 = CONVEX EDGE M1 ANGLE1 == 90 ANGLE2 == 270 WITH LENGTH < 0.046
M1_convex_90_270_lt_054 = CONVEX EDGE M1 ANGLE1 == 90 ANGLE2 == 270 WITH LENGTH < 0.054
M1_convex_90_270_lt_055 = CONVEX EDGE M1 ANGLE1 == 90 ANGLE2 == 270 WITH LENGTH < 0.055
M1_enclosure_V0_lt_040_V0_edge = ENC V0 [M1] < 0.04 ABUT<90 OPPOSITE

Q: M1 edge length with adjacent edge < 0.032um. >= 0.045um
    These two edges are formed by 3 consecutive 90-270-90 degree inner angles
    DRC flags the edge which meets all the below conditions:
    1. Another adjacent edge is line-end (width <= 0.051um, 90-90 inner angles)
    2. Enclosure of V0 by another adjacent edge < 0.04um
A: 
M1_L_5 {
@ M1 edge length with adjacent edge < 0.032um. >= 0.045um
@ These two edges are formed by 3 consecutive 90-270-90 degree inner angles
@ DRC flags the edge which meets all the below conditions:
@ 1. Another adjacent edge is line-end (width <= 0.051um, 90-90 inner angles)
@ 2. Enclosure of V0 by another adjacent edge < 0.04um
 errorArea_lt32_ltCHKvalue = EXT M1_convex_90_270_lt_032 M1_convex_90_270_lt_045 < 0.005 ABUT==90 INTERSECTING ONLY REGION
 condition_1 = M1_convex_90_270_lt_032 TOUCH EDGE errorArea_lt32_ltCHKvalue
 condition_2 = M1_convex_90_270_lt_045 TOUCH EDGE errorArea_lt32_ltCHKvalue
 condition_all = condition_1 OR EDGE condition_2
 enclosure_sid = (M1_end_L_5_6 TOUCH EDGE M1_enclosure_V0_lt_040_V0_edge) NOT TOUCH EDGE condition_all  //; enc side edge

 err1_TMP = INT condition_all enclosure_sid < 0.002 ABUT==90 INTERSECTING ONLY REGION
 err1 = condition_all TOUCH EDGE err1_TMP
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: M1 edge length with adjacent edge < 0.032um
    These two edges are formed by 3 consecutive 90-270-90 degree inner angles
     DRC flags the edge which meets all the below conditions
    1. Another adjacent edge is line-end (width <= 0.051um, 90-90 inner angles)
    2. Enclosure of V0 by another adjacent edge < 0.04um
    3. There is no M1 within the area formed by adjacent edge < 0.032um expand edge 0.063um, extend 0.031um. >= 0.054um
A: 
M1_L_6 {
@ M1 edge length with adjacent edge < 0.032um
@ These two edges are formed by 3 consecutive 90-270-90 degree inner angles
@ DRC flags the edge which meets all the below conditions
@ 1. Another adjacent edge is line-end (width <= 0.051um, 90-90 inner angles)
@ 2. Enclosure of V0 by another adjacent edge < 0.04um
@ 3. There is no M1 within the area formed by adjacent edge < 0.032um expand edge 0.063um, extend 0.031um. >= 0.054um
 errorArea_lt32_ltCHKvalue = EXT M1_convex_90_270_lt_032 M1_convex_90_270_lt_054 < 0.005 ABUT==90 INTERSECTING ONLY REGION
 condition_1 = M1_convex_90_270_lt_032 TOUCH EDGE errorArea_lt32_ltCHKvalue
 condition_2 = M1_convex_90_270_lt_054 TOUCH EDGE errorArea_lt32_ltCHKvalue
 condition_all = condition_1 OR EDGE condition_2
 enclosure_sid = (M1_end_L_5_6 TOUCH EDGE M1_enclosure_V0_lt_040_V0_edge) NOT TOUCH EDGE condition_all  //; enc side edge

 y1 = INT condition_all enclosure_sid < 0.005 ABUT==90 INTERSECTING ONLY REGION
 y2 = condition_all TOUCH EDGE y1
 y3 = EXT y2 condition_all < 0.005 ABUT==90 INTERSECTING ONLY REGION
 y4 = (condition_all NOT TOUCH EDGE y2) TOUCH EDGE y3

 x1 = EXPAND EDGE y4 OUTSIDE BY 0.063
 x2 = EXPAND EDGE ((LENGTH x1 == 0.063) NOT TOUCH EDGE y2) OUTSIDE BY 0.031
 x3 = (x1 or x2) AND M1
 x4 = (x1 or x2) NOT ENCLOSE x3
 err1 = condition_all COIN EDGE x4
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: Length of 45-degree bent M1, except MARKS region >= 0.445um
A: 
M1_L_7 {
@ Length of 45-degree bent M1, except MARKS region >= 0.445um
 err1 = LENGTH M1_45_skew_edges < 0.445
 err1 NOT INSIDE EDGE MARKS
}

//M2


Q: Mxy edge length with adjacent edge < 0.032um (these two edges formed by three consecutive 270-90-270 degree corner) >= 0.064um
    DRC doesn't flag if there is Mxy in the region which is formed by 0.125um extension from these two edges and the 90-degree outer vertex
A: 
M2_L_1 {
@ Mxy edge length with adjacent edge < 0.032um (these two edges formed by three consecutive 270-90-270 degree corner) >= 0.064um
@ DRC doesn't flag if there is Mxy in the region which is formed by 0.125um extension from these two edges and the 90-degree outer vertex
 L1 = CONVEX EDGE M2 ANGLE1 == 90 ANGLE2 == 270 WITH LENGTH < 0.032
 L2 = CONVEX EDGE M2 ANGLE1 == 90 ANGLE2 == 270 WITH LENGTH < 0.064
 L3_corner = INT L1 L2 < 0.005 ABUT==90 INTERSECTING ONLY REGION
 L1_c_edge = L1 TOUCH EDGE L3_corner
 L2_c_edge = L2 TOUCH EDGE L3_corner
 L1_c_s125 = EXPAND EDGE L1_c_edge OUTSIDE BY 0.125
 L2_c_s125 = EXPAND EDGE L2_c_edge OUTSIDE BY 0.125
 // 
 SQ_corner_raw = (EXT L1_c_s125 L2_c_s125 < 0.125 ABUT==90 INTERSECTING ONLY REGION EXTENTS) NOT INSIDE M2
 SQ_corner = (SQ_corner_raw NOT COIN EDGE L1_c_s125) NOT COIN EDGE L2_c_s125
 // 
 RM_step_1 = INT SQ_corner <= 0.586*0.125 ABUT==90 INTERSECTING ONLY REGION
 SQ_step_1 = SQ_corner_raw NOT RM_step_1
 RM_step_2 = INT SQ_step_1 <= 0.215*0.125 ABUT>134.8 <135.2 INTERSECTING ONLY REGION
 SQ_step_2 = SQ_step_1 NOT RM_step_2
 SQ_step_3 = (SQ_step_2 OR L1_c_s125) OR L2_c_s125
 SQ_real = SQ_step_3 NOT INTERACT (SQ_step_3 AND M2)
 err1_TMP = L3_corner TOUCH SQ_real
 err1 = EXPAND EDGE (M2 TOUCH EDGE err1_TMP) INSIDE BY 0.001
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: Mxy edge length with adjacent edge < 0.032um (these two edges formed by three consecutive 90-270-90 degree corners), except EFUSE region >= 0.064um
A: 
M2_L_2 {
@ Mxy edge length with adjacent edge < 0.032um (these two edges formed by three consecutive 90-270-90 degree corners), except EFUSE region >= 0.064um
 chk_EDG = LENGTH M2_convex_270_90_edges < 0.032
 err_EDG = LENGTH M2_convex_270_90_edges < 0.064
 err1 = EXT chk_EDG err_EDG < 0.005 ABUT==90 INTERSECTING ONLY REGION
 err1 NOT INSIDE EFUSE
}
 
Q: Mxy branch length when Mxy branch width <= 0.269um, and connected to wide metal with both width and length >= 0.27um. >= 0.139um
    DRC waive if the branch region can fill at least one (0.005um*design value) rectangle
A: 
M2_L_3 {
@ Mxy branch length when Mxy branch width <= 0.269um, and connected to wide metal with both width and length >= 0.27um. >= 0.139um
@ DRC waive if the branch region can fill at least one (0.005um*design value) rectangle
 // 0.065 based on Mxy.W.3
 dorian_large = M2 WITH WIDTH >= 0.27
 dorian_whole = M2 INTERACT dorian_large
 dorian_large_ep = SIZE dorian_large BY 0.005 INSIDE OF dorian_whole
 dorian_branch_1 = M2 WITH WIDTH >= 0.065 < 0.269+GLOBAL_TOLERANCE
 dorian_branch_2 = dorian_branch_1 NOT OUTSIDE dorian_large_ep
 dorian_branch_3 = ENCLOSE RECTANGLE dorian_branch_2 0.005 0.139 ORTHOGONAL ONLY
 err1 = dorian_branch_2 NOT dorian_branch_3
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: Mxy branch length when Mxy branch width <= 0.269um, and connected to wide metal with both width and length >= 0.542um. >= 0.248um
    DRC waive if the branch region can fill at least one (0.005um*design value) rectangle
A: 
M2_L_4 {
@ Mxy branch length when Mxy branch width <= 0.269um, and connected to wide metal with both width and length >= 0.542um. >= 0.248um
@ DRC waive if the branch region can fill at least one (0.005um*design value) rectangle
 // 0.065 based on Mxy.W.3
 dorian_large = M2 WITH WIDTH >= 0.542
 dorian_whole = M2 INTERACT dorian_large
 dorian_large_ep = SIZE dorian_large BY 0.005 INSIDE OF dorian_whole
 dorian_branch_1 = M2 WITH WIDTH >= 0.065 < 0.269+GLOBAL_TOLERANCE
 dorian_branch_2 = dorian_branch_1 NOT OUTSIDE dorian_large_ep
 dorian_branch_3 = ENCLOSE RECTANGLE dorian_branch_2 0.005 0.248 ORTHOGONAL ONLY
 err1 = dorian_branch_2 NOT dorian_branch_3
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of Mxy branch when Mxy branch width <= 0.269um, and connected to wide metal e with both width and length >= 1um. >= 0.495um
    DRC waive if the branch region can fill at least one (0.005um*design value) rectangle
A: 
M2_L_5 {
@ Length of Mxy branch when Mxy branch width <= 0.269um, and connected to wide metal e with both width and length >= 1um. >= 0.495um
@ DRC waive if the branch region can fill at least one (0.005um*design value) rectangle
 // 0.065 based on Mxy.W.3
 dorian_large = M2 WITH WIDTH >= 1.00
 dorian_whole = M2 INTERACT dorian_large
 dorian_large_ep = SIZE dorian_large BY 0.005 INSIDE OF dorian_whole
 dorian_branch_1 = M2 WITH WIDTH >= 0.065 < 0.269+GLOBAL_TOLERANCE
 dorian_branch_2 = dorian_branch_1 NOT OUTSIDE dorian_large_ep
 dorian_branch_3 = ENCLOSE RECTANGLE dorian_branch_2 0.005 0.495 ORTHOGONAL ONLY
 err1 = dorian_branch_2 NOT dorian_branch_3
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 45-degree bent metal, except MARKS region >= 0.44um
A: 
M2_L_6 {
@ Length of 45-degree bent metal, except MARKS region >= 0.44um
 err1 = LENGTH M2_45_skew_edges < 0.44
 err1 NOT INSIDE EDGE MARKS
}


//M3

Q: Mxy edge length with adjacent edge < 0.032um (these two edges formed by three consecutive 270-90-270 degree corner) >= 0.064um
    DRC doesn't flag if there is Mxy in the region which is formed by 0.125um extension from these two edges and the 90-degree outer vertex
A: 
M3_L_1 {
@ Mxy edge length with adjacent edge < 0.032um (these two edges formed by three consecutive 270-90-270 degree corner) >= 0.064um
@ DRC doesn't flag if there is Mxy in the region which is formed by 0.125um extension from these two edges and the 90-degree outer vertex
 L1 = CONVEX EDGE M3 ANGLE1 == 90 ANGLE2 == 270 WITH LENGTH < 0.032
 L2 = CONVEX EDGE M3 ANGLE1 == 90 ANGLE2 == 270 WITH LENGTH < 0.064
 L3_corner = INT L1 L2 < 0.005 ABUT==90 INTERSECTING ONLY REGION
 L1_c_edge = L1 TOUCH EDGE L3_corner
 L2_c_edge = L2 TOUCH EDGE L3_corner
 L1_c_s125 = EXPAND EDGE L1_c_edge OUTSIDE BY 0.125
 L2_c_s125 = EXPAND EDGE L2_c_edge OUTSIDE BY 0.125
 // 
 SQ_corner_raw = (EXT L1_c_s125 L2_c_s125 < 0.125 ABUT==90 INTERSECTING ONLY REGION EXTENTS) NOT INSIDE M3
 SQ_corner = (SQ_corner_raw NOT COIN EDGE L1_c_s125) NOT COIN EDGE L2_c_s125
 // 
 RM_step_1 = INT SQ_corner <= 0.586*0.125 ABUT==90 INTERSECTING ONLY REGION
 SQ_step_1 = SQ_corner_raw NOT RM_step_1
 RM_step_2 = INT SQ_step_1 <= 0.215*0.125 ABUT>134.8 <135.2 INTERSECTING ONLY REGION
 SQ_step_2 = SQ_step_1 NOT RM_step_2
 SQ_step_3 = (SQ_step_2 OR L1_c_s125) OR L2_c_s125
 SQ_real = SQ_step_3 NOT INTERACT (SQ_step_3 AND M3)
 err1_TMP = L3_corner TOUCH SQ_real
 err1 = EXPAND EDGE (M3 TOUCH EDGE err1_TMP) INSIDE BY 0.001
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: Mxy edge length with adjacent edge < 0.032um (these two edges formed by three consecutive 90-270-90 degree corners), except EFUSE region >= 0.064um
A: 
M3_L_2 {
@ Mxy edge length with adjacent edge < 0.032um (these two edges formed by three consecutive 90-270-90 degree corners), except EFUSE region >= 0.064um
 chk_EDG = LENGTH M3_convex_270_90_edges < 0.032
 err_EDG = LENGTH M3_convex_270_90_edges < 0.064
 err1 = EXT chk_EDG err_EDG < 0.005 ABUT==90 INTERSECTING ONLY REGION
 err1 NOT INSIDE EFUSE
}
 
Q: Mxy branch length when Mxy branch width <= 0.269um, and connected to wide metal with both width and length >= 0.27um. >= 0.139um
    DRC waive if the branch region can fill at least one (0.005um*design value) rectangle
A: 
M3_L_3 {
@ Mxy branch length when Mxy branch width <= 0.269um, and connected to wide metal with both width and length >= 0.27um. >= 0.139um
@ DRC waive if the branch region can fill at least one (0.005um*design value) rectangle
 // 0.065 based on Mxy.W.3
 dorian_large = M3 WITH WIDTH >= 0.27
 dorian_whole = M3 INTERACT dorian_large
 dorian_large_ep = SIZE dorian_large BY 0.005 INSIDE OF dorian_whole
 dorian_branch_1 = M3 WITH WIDTH >= 0.065 < 0.269+GLOBAL_TOLERANCE
 dorian_branch_2 = dorian_branch_1 NOT OUTSIDE dorian_large_ep
 dorian_branch_3 = ENCLOSE RECTANGLE dorian_branch_2 0.005 0.139 ORTHOGONAL ONLY
 err1 = dorian_branch_2 NOT dorian_branch_3
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: Mxy branch length when Mxy branch width <= 0.269um, and connected to wide metal with both width and length >= 0.542um. >= 0.248um
    DRC waive if the branch region can fill at least one (0.005um*design value) rectangle
A: 
M3_L_4 {
@ Mxy branch length when Mxy branch width <= 0.269um, and connected to wide metal with both width and length >= 0.542um. >= 0.248um
@ DRC waive if the branch region can fill at least one (0.005um*design value) rectangle
 // 0.065 based on Mxy.W.3
 dorian_large = M3 WITH WIDTH >= 0.542
 dorian_whole = M3 INTERACT dorian_large
 dorian_large_ep = SIZE dorian_large BY 0.005 INSIDE OF dorian_whole
 dorian_branch_1 = M3 WITH WIDTH >= 0.065 < 0.269+GLOBAL_TOLERANCE
 dorian_branch_2 = dorian_branch_1 NOT OUTSIDE dorian_large_ep
 dorian_branch_3 = ENCLOSE RECTANGLE dorian_branch_2 0.005 0.248 ORTHOGONAL ONLY
 err1 = dorian_branch_2 NOT dorian_branch_3
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of Mxy branch when Mxy branch width <= 0.269um, and connected to wide metal e with both width and length >= 1um. >= 0.495um
    DRC waive if the branch region can fill at least one (0.005um*design value) rectangle
A: 
M3_L_5 {
@ Length of Mxy branch when Mxy branch width <= 0.269um, and connected to wide metal e with both width and length >= 1um. >= 0.495um
@ DRC waive if the branch region can fill at least one (0.005um*design value) rectangle
 // 0.065 based on Mxy.W.3
 dorian_large = M3 WITH WIDTH >= 1.00
 dorian_whole = M3 INTERACT dorian_large
 dorian_large_ep = SIZE dorian_large BY 0.005 INSIDE OF dorian_whole
 dorian_branch_1 = M3 WITH WIDTH >= 0.065 < 0.269+GLOBAL_TOLERANCE
 dorian_branch_2 = dorian_branch_1 NOT OUTSIDE dorian_large_ep
 dorian_branch_3 = ENCLOSE RECTANGLE dorian_branch_2 0.005 0.495 ORTHOGONAL ONLY
 err1 = dorian_branch_2 NOT dorian_branch_3
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 45-degree bent metal, except MARKS region >= 0.44um
A: 
M3_L_6 {
@ Length of 45-degree bent metal, except MARKS region >= 0.44um
 err1 = LENGTH M3_45_skew_edges < 0.44
 err1 NOT INSIDE EDGE MARKS
}

//125xmy4

Q: Length of 45-degree bent 1.25xMy, except MARKS >= 0.905um
A: 
125xmy4_L_1 {
@ Length of 45-degree bent 1.25xMy, except MARKS >= 0.905um
 err1 = LENGTH M4_45_skew_edges < 0.905
 err1 NOT INSIDE EDGE MARKS
}
 
Q: 1.25xMy edge length when the adjacent edge length <= 0.089um, except two 0.08um edges form a convex corner. >= 0.099um
A: 
125xmy4_L_2 {
@ 1.25xMy edge length when the adjacent edge length <= 0.089um, except two 0.08um edges form a convex corner. >= 0.099um
 chk_condition = LENGTH M4 <= 0.089
 err_EdgLength = LENGTH M4 < 0.099
 waive_CASE = INT (LENGTH chk_condition == 0.08) (LENGTH err_EdgLength == 0.08) < 0.005 ABUT INTERSECTING ONLY REGION
 err1_TMP_A = EXT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION
 err1_TMP_B = (INT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION) NOT INTERACT waive_CASE
 err1 = OR (EXPAND EDGE (M4 TOUCH EDGE err1_TMP_A) OUTSIDE BY 0.001 EXTEND BY 0.001) (EXPAND EDGE (M4 TOUCH EDGE err1_TMP_B) OUTSIDE BY 0.001 EXTEND BY 0.001)
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMy edge length when the adjacent edge length < 0.04um. >= 0.119um
A: 
125xmy4_L_3 {
@ 1.25xMy edge length when the adjacent edge length < 0.04um. >= 0.119um
 chk_condition = LENGTH M4 < 0.04
 err_EdgLength = LENGTH M4 < 0.119
 err1_TMP_A = EXT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION
 err1_TMP_B = INT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION
 err1 = OR (EXPAND EDGE (M4 TOUCH EDGE err1_TMP_A) OUTSIDE BY 0.001 EXTEND BY 0.001) (EXPAND EDGE (M4 TOUCH EDGE err1_TMP_B) OUTSIDE BY 0.001 EXTEND BY 0.001)
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMy edge length when the adjacent line-end width < 0.060um. >= 0.159um
A: 
125xmy4_L_4 {
@ 1.25xMy edge length when the adjacent line-end width < 0.060um. >= 0.159um
 chk_condition = EXPAND EDGE M4_end_060 INSIDE BY 0.001
 err_EdgLength = (M4_convex_eq_one_edges TOUCH EDGE chk_condition) NOT COIN EDGE M4_end_060
 err1 = LENGTH err_EdgLength < 0.159
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}
 
Q: 1.25xMy edge length when the adjacent line-end width < 0.08um. >= 0.109um
A: 
125xmy4_L_5 {
@ 1.25xMy edge length when the adjacent line-end width < 0.08um. >= 0.109um
 chk_condition = EXPAND EDGE M4_end_080 INSIDE BY 0.001
 err_EdgLength = (M4_convex_eq_one_edges TOUCH EDGE chk_condition) NOT COIN EDGE M4_end_080
 err1 = LENGTH err_EdgLength < 0.109
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}
 
Q: 1.25xMy edge length between two consecutive 90-270 degree corners >= 0.019um
A: 
125xmy4_L_6 {
@ 1.25xMy edge length between two consecutive 90-270 degree corners >= 0.019um
 // DRC also check the condition with at least one 90-270 degree corners
 mets_ERRS_EDGE = LENGTH M4_convex_270_90_edges < 0.019
 mets_ERRS_a = INT mets_ERRS_EDGE M4_convex_eq_one_edges < 0.005 ABUT==90 INTERSECTING ONLY REGION
 mets_ERRS_b = EXT mets_ERRS_EDGE M4_convex_eq_one_edges < 0.005 ABUT==90 INTERSECTING ONLY REGION
 err1_TMP = (M4_convex_eq_one_edges TOUCH EDGE mets_ERRS_a) OR EDGE (M4_convex_eq_one_edges TOUCH EDGE mets_ERRS_b)
 err1 = EXPAND EDGE err1_TMP INSIDE BY 0.001 CORNER FILL
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMy edge length between two consecutive 90-270 degree corners with one adjacent line end width < 0.08um and the other adjacent edge length > 0.07um. >= 0.238um
A: 
125xmy4_L_7 {
@ 1.25xMy edge length between two consecutive 90-270 degree corners with one adjacent line end width < 0.08um and the other adjacent edge length > 0.07um. >= 0.238um
 line_CHK_a_RAW = LENGTH M4_convex_270_90_edges > 0.07 < 0.238
 line_CHK_a_TMP = EXPAND EDGE M4_end_080 INSIDE BY 0.001
 line_CHK_a = (line_CHK_a_RAW NOT TOUCH EDGE M4_end_080) TOUCH EDGE line_CHK_a_TMP
 line_CHK_b = LENGTH M4_convex_lt_two_edges > 0.07
 err1 = EXT line_CHK_b line_CHK_a < 0.005 ABUT==90 INTERSECTING REGION
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMy U-shape inner edge length between two consecutive 270-270 degree corners >= 0.08um
A: 
125xmy4_L_8 {
@ 1.25xMy U-shape inner edge length between two consecutive 270-270 degree corners >= 0.08um
 err1 = LENGTH M4_convex_270_270_edges < 0.08
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}
 
Q: Length of 1.25xMy metal branch (width <= 0.269um) >= 1um
    When:
    1) Metal branch is connected to wide metal with width and length >= 0.398um
    2) One square Vy-1/1.25xVn in metal branch, and space to wide metal <= 1um
    DRC flags branch that can't enclose a 0.08*1um orthogonal rectangle
    ("V3_40" is mapped to "V3" in the rule name of this check)
A: 
125xmy4_L_9_V3 {
@ Length of 1.25xMy metal branch (width <= 0.269um) >= 1um
@ When:
@ 1) Metal branch is connected to wide metal with width and length >= 0.398um
@ 2) One square Vy-1/1.25xVn in metal branch, and space to wide metal <= 1um
@ DRC flags branch that can't enclose a 0.08*1um orthogonal rectangle
@ ("V3_40" is mapped to "V3" in the rule name of this check)
 WIDE_M4 = (WITH WIDTH M4 > 0.398-GLOBAL_TOLERANCE) ENCLOSE RECTANGLE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M4 BY 1+GLOBAL_TOLERANCE INSIDE OF M4 STEP 0.025) NOT WIDE_M4) AND M4
 branch_size = INT (M4 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M4
 branch_down = (branch_real AND M3) INTERACT DVK_V3_SQ == 1
 branch_down_real = ((M4 INTERACT branch_down) AND M3) INTERACT DVK_V3_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 1 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M5) INTERACT (RECTANGLE V4 ASPECT == 1) == 1
 branch_up_real = ((M4 INTERACT branch_up) AND M5) INTERACT (RECTANGLE V4 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 1 ORTHOGONAL ONLY
 err1_down NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMy metal branch (width <= 0.269um) >= 1um
    When:
    1) Metal branch is connected to wide metal with width and length >= 0.398um
    2) One square Vy-1/1.25xVn in metal branch, and space to wide metal <= 1um
    DRC flags branch that can't enclose a 0.08*1um orthogonal rectangle
    ("V4_50" is mapped to "V4" in the rule name of this check)
A:
125xmy4_L_9_V4 {
@ Length of 1.25xMy metal branch (width <= 0.269um) >= 1um
@ When:
@ 1) Metal branch is connected to wide metal with width and length >= 0.398um
@ 2) One square Vy-1/1.25xVn in metal branch, and space to wide metal <= 1um
@ DRC flags branch that can't enclose a 0.08*1um orthogonal rectangle
@ ("V4_50" is mapped to "V4" in the rule name of this check)
 WIDE_M4 = (WITH WIDTH M4 > 0.398-GLOBAL_TOLERANCE) ENCLOSE RECTANGLE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M4 BY 1+GLOBAL_TOLERANCE INSIDE OF M4 STEP 0.025) NOT WIDE_M4) AND M4
 branch_size = INT (M4 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M4
 branch_down = (branch_real AND M3) INTERACT DVK_V3_SQ == 1
 branch_down_real = ((M4 INTERACT branch_down) AND M3) INTERACT DVK_V3_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 1 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M5) INTERACT (RECTANGLE V4 ASPECT == 1) == 1
 branch_up_real = ((M4 INTERACT branch_up) AND M5) INTERACT (RECTANGLE V4 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 1 ORTHOGONAL ONLY
 err2_up NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMy metal branch (width <= 0.269um) >= 3um
    When:
    1) Metal branch is connected to wide metal with width and length >= 0.542um
    2) One square Vy-1/1.25xVn in metal branch, and space to wide metal <= 3um
    DRC flags branch that can't enclose a 0.08*3um orthogonal rectangle
    ("V3_40" is mapped to "V3" in the rule name of this check)
A: 
125xmy4_L_10_V3 {
@ Length of 1.25xMy metal branch (width <= 0.269um) >= 3um
@ When:
@ 1) Metal branch is connected to wide metal with width and length >= 0.542um
@ 2) One square Vy-1/1.25xVn in metal branch, and space to wide metal <= 3um
@ DRC flags branch that can't enclose a 0.08*3um orthogonal rectangle
@ ("V3_40" is mapped to "V3" in the rule name of this check)
 WIDE_M4 = (WITH WIDTH M4 > 0.542-GLOBAL_TOLERANCE) ENCLOSE RECTANGLE 0.542-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE 0.542-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M4 BY 3+GLOBAL_TOLERANCE INSIDE OF M4 STEP 0.025) NOT WIDE_M4) AND M4
 branch_size = INT (M4 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M4
 branch_down = (branch_real AND M3) INTERACT DVK_V3_SQ == 1
 branch_down_real = ((M4 INTERACT branch_down) AND M3) INTERACT DVK_V3_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 3 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M5) INTERACT (RECTANGLE V4 ASPECT == 1) == 1
 branch_up_real = ((M4 INTERACT branch_up) AND M5) INTERACT (RECTANGLE V4 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 3 ORTHOGONAL ONLY
 err1_down NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMy metal branch (width <= 0.269um) >= 3um
    When:
    1) Metal branch is connected to wide metal with width and length >= 0.542um
    2) One square Vy-1/1.25xVn in metal branch, and space to wide metal <= 3um
    DRC flags branch that can't enclose a 0.08*3um orthogonal rectangle
    ("V4_50" is mapped to "V4" in the rule name of this check)
A: 
125xmy4_L_10_V4 {
@ Length of 1.25xMy metal branch (width <= 0.269um) >= 3um
@ When:
@ 1) Metal branch is connected to wide metal with width and length >= 0.542um
@ 2) One square Vy-1/1.25xVn in metal branch, and space to wide metal <= 3um
@ DRC flags branch that can't enclose a 0.08*3um orthogonal rectangle
@ ("V4_50" is mapped to "V4" in the rule name of this check)
 WIDE_M4 = (WITH WIDTH M4 > 0.542-GLOBAL_TOLERANCE) ENCLOSE RECTANGLE 0.542-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE 0.542-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M4 BY 3+GLOBAL_TOLERANCE INSIDE OF M4 STEP 0.025) NOT WIDE_M4) AND M4
 branch_size = INT (M4 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M4
 branch_down = (branch_real AND M3) INTERACT DVK_V3_SQ == 1
 branch_down_real = ((M4 INTERACT branch_down) AND M3) INTERACT DVK_V3_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 3 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M5) INTERACT (RECTANGLE V4 ASPECT == 1) == 1
 branch_up_real = ((M4 INTERACT branch_up) AND M5) INTERACT (RECTANGLE V4 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 3 ORTHOGONAL ONLY
 err2_up NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMy metal branch (width <= 0.269um) >= 5um
    When:
    1) Metal branch is connected to wide metal with width and length > 1um
    2) One square Vy-1/1.25xVn in metal branch, and space to wide metal <= 5um
    DRC flags branch that can't enclose a 0.08*5um orthogonal rectangle
    ("V3_40" is mapped to "V3" in the rule name of this check)
A: 
125xmy4_L_11_V3 {
@ Length of 1.25xMy metal branch (width <= 0.269um) >= 5um
@ When:
@ 1) Metal branch is connected to wide metal with width and length > 1um
@ 2) One square Vy-1/1.25xVn in metal branch, and space to wide metal <= 5um
@ DRC flags branch that can't enclose a 0.08*5um orthogonal rectangle
@ ("V3_40" is mapped to "V3" in the rule name of this check)
 WIDE_M4 = (WITH WIDTH M4 > 1.0) ENCLOSE RECTANGLE 1.0+GLOBAL_TOLERANCE 1.0+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M4 BY 5+GLOBAL_TOLERANCE INSIDE OF M4 STEP 0.025) NOT WIDE_M4) AND M4
 branch_size = INT (M4 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M4
 branch_down = (branch_real AND M3) INTERACT DVK_V3_SQ == 1
 branch_down_real = ((M4 INTERACT branch_down) AND M3) INTERACT DVK_V3_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 5 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M5) INTERACT (RECTANGLE V4 ASPECT == 1) == 1
 branch_up_real = ((M4 INTERACT branch_up) AND M5) INTERACT (RECTANGLE V4 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 5 ORTHOGONAL ONLY
 err1_down NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMy metal branch (width <= 0.269um) >= 5um
    When:
    1) Metal branch is connected to wide metal with width and length > 1um
    2) One square Vy-1/1.25xVn in metal branch, and space to wide metal <= 5um
    DRC flags branch that can't enclose a 0.08*5um orthogonal rectangle
    ("V4_50" is mapped to "V4" in the rule name of this check)
A: 
125xmy4_L_11_V4 {
@ Length of 1.25xMy metal branch (width <= 0.269um) >= 5um
@ When:
@ 1) Metal branch is connected to wide metal with width and length > 1um
@ 2) One square Vy-1/1.25xVn in metal branch, and space to wide metal <= 5um
@ DRC flags branch that can't enclose a 0.08*5um orthogonal rectangle
@ ("V4_50" is mapped to "V4" in the rule name of this check)
 WIDE_M4 = (WITH WIDTH M4 > 1.0) ENCLOSE RECTANGLE 1.0+GLOBAL_TOLERANCE 1.0+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M4 BY 5+GLOBAL_TOLERANCE INSIDE OF M4 STEP 0.025) NOT WIDE_M4) AND M4
 branch_size = INT (M4 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M4
 branch_down = (branch_real AND M3) INTERACT DVK_V3_SQ == 1
 branch_down_real = ((M4 INTERACT branch_down) AND M3) INTERACT DVK_V3_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 5 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M5) INTERACT (RECTANGLE V4 ASPECT == 1) == 1
 branch_up_real = ((M4 INTERACT branch_up) AND M5) INTERACT (RECTANGLE V4 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 5 ORTHOGONAL ONLY
 err2_up NOT INSIDE SealR_NOT_BULK
}


//125xm6

Q: Length of 45-degree bent 1.25xMn, except MARKS >= 0.905um
A: 
125xm6_L_1 {
@ Length of 45-degree bent 1.25xMn, except MARKS >= 0.905um
 err1 = LENGTH M6_45_skew_edges < 0.905
 err1 NOT INSIDE EDGE MARKS
}
 
Q: 1.25xMn edge length when the adjacent edge length <= 0.089um, except two 0.08um edges form a convex corner. >= 0.099um
A: 
125xm6_L_2 {
@ 1.25xMn edge length when the adjacent edge length <= 0.089um, except two 0.08um edges form a convex corner. >= 0.099um
 chk_condition = LENGTH M6 <= 0.089
 err_EdgLength = LENGTH M6 < 0.099
 waive_CASE = INT (LENGTH chk_condition == 0.08) (LENGTH err_EdgLength == 0.08) < 0.005 ABUT INTERSECTING ONLY REGION
 err1_TMP_A = EXT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION
 err1_TMP_B = (INT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION) NOT INTERACT waive_CASE
 err1 = OR (EXPAND EDGE (M6 TOUCH EDGE err1_TMP_A) OUTSIDE BY 0.001 EXTEND BY 0.001) (EXPAND EDGE (M6 TOUCH EDGE err1_TMP_B) OUTSIDE BY 0.001 EXTEND BY 0.001)
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length when the adjacent edge length < 0.04um. >= 0.119um
A: 
125xm6_L_3 {
@ 1.25xMn edge length when the adjacent edge length < 0.04um. >= 0.119um
 chk_condition = LENGTH M6 < 0.04
 err_EdgLength = LENGTH M6 < 0.119
 err1_TMP_A = EXT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION
 err1_TMP_B = INT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION
 err1 = OR (EXPAND EDGE (M6 TOUCH EDGE err1_TMP_A) OUTSIDE BY 0.001 EXTEND BY 0.001) (EXPAND EDGE (M6 TOUCH EDGE err1_TMP_B) OUTSIDE BY 0.001 EXTEND BY 0.001)
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length when the adjacent line-end width < 0.06um. >= 0.159um
A: 
125xm6_L_4 {
@ 1.25xMn edge length when the adjacent line-end width < 0.06um. >= 0.159um
 chk_condition = EXPAND EDGE M6_end_060 INSIDE BY 0.001
 err_EdgLength = (M6_convex_eq_one_edges TOUCH EDGE chk_condition) NOT COIN EDGE M6_end_060
 err1 = LENGTH err_EdgLength < 0.159
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length when the adjacent line-end width < 0.08um. >= 0.109um
A: 
125xm6_L_5 {
@ 1.25xMn edge length when the adjacent line-end width < 0.08um. >= 0.109um
 chk_condition = EXPAND EDGE M6_end_080 INSIDE BY 0.001
 err_EdgLength = (M6_convex_eq_one_edges TOUCH EDGE chk_condition) NOT COIN EDGE M6_end_080
 err1 = LENGTH err_EdgLength < 0.109
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length between two consecutive 90-270 degree corners >= 0.019um
A:
125xm6_L_6 {
@ 1.25xMn edge length between two consecutive 90-270 degree corners >= 0.019um
 // DRC also check the condition with at least one 90-270 degree corners
 mets_ERRS_EDGE = LENGTH M6_convex_270_90_edges < 0.019
 mets_ERRS_a = INT mets_ERRS_EDGE M6_convex_eq_one_edges < 0.005 ABUT==90 INTERSECTING ONLY REGION
 mets_ERRS_b = EXT mets_ERRS_EDGE M6_convex_eq_one_edges < 0.005 ABUT==90 INTERSECTING ONLY REGION
 err1_TMP = (M6_convex_eq_one_edges TOUCH EDGE mets_ERRS_a) OR EDGE (M6_convex_eq_one_edges TOUCH EDGE mets_ERRS_b)
 err1 = EXPAND EDGE err1_TMP INSIDE BY 0.001 CORNER FILL
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length between two consecutive 90-270 degree corners with adjacent line end edge width < 0.08um and another adjacent edge > 0.070um. >= 0.238um
A:
125xm6_L_7 {
@ 1.25xMn edge length between two consecutive 90-270 degree corners with adjacent line end edge width < 0.08um and another adjacent edge > 0.070um. >= 0.238um
 line_CHK_a_RAW = LENGTH M6_convex_270_90_edges > 0.07 < 0.238
 line_CHK_a_TMP = EXPAND EDGE M6_end_080 INSIDE BY 0.001
 line_CHK_a = (line_CHK_a_RAW NOT TOUCH EDGE M6_end_080) TOUCH EDGE line_CHK_a_TMP
 line_CHK_b = LENGTH M6_convex_lt_two_edges > 0.07
 err1 = EXT line_CHK_b line_CHK_a < 0.005 ABUT==90 INTERSECTING REGION
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMn U-shape inner edge length between two consecutive 270-270 degree corners >= 0.08um
A: 
125xm6_L_8 {
@ 1.25xMn U-shape inner edge length between two consecutive 270-270 degree corners >= 0.08um
 err1 = LENGTH M6_convex_270_270_edges < 0.08
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 1.5um
    When:
    1. Metal branch is connected to wide metal with width and length >= 0.398um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 1.5um
    DRC flags branch that can't enclose a 0.08um*1.5um orthogonal rectangle
    ("V5_50" is mapped to "V5" in the rule name of this check)
A: 
125xm6_L_9_V5 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 1.5um
@ When:
@ 1. Metal branch is connected to wide metal with width and length >= 0.398um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 1.5um
@ DRC flags branch that can't enclose a 0.08um*1.5um orthogonal rectangle
@ ("V5_50" is mapped to "V5" in the rule name of this check)
 WIDE_M6 = (WITH WIDTH M6 > 0.398-GLOBAL_TOLERANCE) ENCLOSE RECTANGLE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M6 BY 1.5+GLOBAL_TOLERANCE INSIDE OF M6 STEP 0.025) NOT WIDE_M6) AND M6
 branch_size = INT (M6 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M6
 branch_down = (branch_real AND M5) INTERACT DVK_V5_SQ == 1
 branch_down_real = ((M6 INTERACT branch_down) AND M5) INTERACT DVK_V5_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 1.5 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M7) INTERACT (RECTANGLE V6 ASPECT == 1) == 1
 branch_up_real = ((M6 INTERACT branch_up) AND M7) INTERACT (RECTANGLE V6 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 1.5 ORTHOGONAL ONLY
 err1_down NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 1.5um
     When:
     1. Metal branch is connected to wide metal with width and length >= 0.398um
     2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 1.5um
    DRC flags branch that can't enclose a 0.08um*1.5um orthogonal rectangle
    ("V6_50" is mapped to "V6" in the rule name of this check)
A:
125xm6_L_9_V6 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 1.5um
@ When:
@ 1. Metal branch is connected to wide metal with width and length >= 0.398um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 1.5um
@ DRC flags branch that can't enclose a 0.08um*1.5um orthogonal rectangle
@ ("V6_50" is mapped to "V6" in the rule name of this check)
 WIDE_M6 = (WITH WIDTH M6 > 0.398-GLOBAL_TOLERANCE) ENCLOSE RECTANGLE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M6 BY 1.5+GLOBAL_TOLERANCE INSIDE OF M6 STEP 0.025) NOT WIDE_M6) AND M6
 branch_size = INT (M6 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M6
 branch_down = (branch_real AND M5) INTERACT DVK_V5_SQ == 1
 branch_down_real = ((M6 INTERACT branch_down) AND M5) INTERACT DVK_V5_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 1.5 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M7) INTERACT (RECTANGLE V6 ASPECT == 1) == 1
 branch_up_real = ((M6 INTERACT branch_up) AND M7) INTERACT (RECTANGLE V6 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 1.5 ORTHOGONAL ONLY
 err2_up NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 3.6um
    When:
    1. Metal branch is connected to wide metal with width and length > 0.9um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 3.6um
    DRC flags branch that can't enclose a 0.08um*3.6um orthogonal rectangle
    ("V5_50" is mapped to "V5" in the rule name of this check)
A: 
125xm6_L_10_V5 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 3.6um
@ When:
@ 1. Metal branch is connected to wide metal with width and length > 0.9um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 3.6um
@ DRC flags branch that can't enclose a 0.08um*3.6um orthogonal rectangle
@ ("V5_50" is mapped to "V5" in the rule name of this check)
 WIDE_M6 = (WITH WIDTH M6 > 0.9) ENCLOSE RECTANGLE 0.9+GLOBAL_TOLERANCE 0.9+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M6 BY 3.6+GLOBAL_TOLERANCE INSIDE OF M6 STEP 0.025) NOT WIDE_M6) AND M6
 branch_size = INT (M6 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M6
 branch_down = (branch_real AND M5) INTERACT DVK_V5_SQ == 1
 branch_down_real = ((M6 INTERACT branch_down) AND M5) INTERACT DVK_V5_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 3.6 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M7) INTERACT (RECTANGLE V6 ASPECT == 1) == 1
 branch_up_real = ((M6 INTERACT branch_up) AND M7) INTERACT (RECTANGLE V6 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 3.6 ORTHOGONAL ONLY
 err1_down NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 3.6um
     When:
    1. Metal branch is connected to wide metal with width and length > 0.9um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 3.6um
    DRC flags branch that can't enclose a 0.08um*3.6um orthogonal rectangle
    ("V6_50" is mapped to "V6" in the rule name of this check)
A: 
125xm6_L_10_V6 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 3.6um
@ When:
@ 1. Metal branch is connected to wide metal with width and length > 0.9um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 3.6um
@ DRC flags branch that can't enclose a 0.08um*3.6um orthogonal rectangle
@ ("V6_50" is mapped to "V6" in the rule name of this check)
 WIDE_M6 = (WITH WIDTH M6 > 0.9) ENCLOSE RECTANGLE 0.9+GLOBAL_TOLERANCE 0.9+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M6 BY 3.6+GLOBAL_TOLERANCE INSIDE OF M6 STEP 0.025) NOT WIDE_M6) AND M6
 branch_size = INT (M6 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M6
 branch_down = (branch_real AND M5) INTERACT DVK_V5_SQ == 1
 branch_down_real = ((M6 INTERACT branch_down) AND M5) INTERACT DVK_V5_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 3.6 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M7) INTERACT (RECTANGLE V6 ASPECT == 1) == 1
 branch_up_real = ((M6 INTERACT branch_up) AND M7) INTERACT (RECTANGLE V6 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 3.6 ORTHOGONAL ONLY
 err2_up NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 9um
     When:
    1. Metal branch is connected to wide metal with width and length > 1.35um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 9um
    DRC flags branch that can't enclose a 0.08um*9um orthogonal rectangle
    ("V5_50" is mapped to "V5" in the rule name of this check)
A:
125xm6_L_11_V5 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 9um
@ When:
@ 1. Metal branch is connected to wide metal with width and length > 1.35um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 9um
@ DRC flags branch that can't enclose a 0.08um*9um orthogonal rectangle
@ ("V5_50" is mapped to "V5" in the rule name of this check)
 WIDE_M6 = (WITH WIDTH M6 > 1.35) ENCLOSE RECTANGLE 1.35+GLOBAL_TOLERANCE 1.35+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M6 BY 9+GLOBAL_TOLERANCE INSIDE OF M6 STEP 0.025) NOT WIDE_M6) AND M6
 branch_size = INT (M6 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M6
 branch_down = (branch_real AND M5) INTERACT DVK_V5_SQ == 1
 branch_down_real = ((M6 INTERACT branch_down) AND M5) INTERACT DVK_V5_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 9 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M7) INTERACT (RECTANGLE V6 ASPECT == 1) == 1
 branch_up_real = ((M6 INTERACT branch_up) AND M7) INTERACT (RECTANGLE V6 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 9 ORTHOGONAL ONLY
 err1_down NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 9um
    When:
    1. Metal branch is connected to wide metal with width and length > 1.35um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 9um
    DRC flags branch that can't enclose a 0.08um*9um orthogonal rectangle
    ("V6_50" is mapped to "V6" in the rule name of this check)
A: 
125xm6_L_11_V6 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 9um
@ When:
@ 1. Metal branch is connected to wide metal with width and length > 1.35um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 9um
@ DRC flags branch that can't enclose a 0.08um*9um orthogonal rectangle
@ ("V6_50" is mapped to "V6" in the rule name of this check)
 WIDE_M6 = (WITH WIDTH M6 > 1.35) ENCLOSE RECTANGLE 1.35+GLOBAL_TOLERANCE 1.35+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M6 BY 9+GLOBAL_TOLERANCE INSIDE OF M6 STEP 0.025) NOT WIDE_M6) AND M6
 branch_size = INT (M6 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M6
 branch_down = (branch_real AND M5) INTERACT DVK_V5_SQ == 1
 branch_down_real = ((M6 INTERACT branch_down) AND M5) INTERACT DVK_V5_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 9 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M7) INTERACT (RECTANGLE V6 ASPECT == 1) == 1
 branch_up_real = ((M6 INTERACT branch_up) AND M7) INTERACT (RECTANGLE V6 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 9 ORTHOGONAL ONLY
 err2_up NOT INSIDE SealR_NOT_BULK
}


//125xm5


Q: Length of 45-degree bent 1.25xMn, except MARKS >= 0.905um
A:
125xm5_L_1 {
@ Length of 45-degree bent 1.25xMn, except MARKS >= 0.905um
 err1 = LENGTH M5_45_skew_edges < 0.905
 err1 NOT INSIDE EDGE MARKS
}
 
Q: 1.25xMn edge length when the adjacent edge length <= 0.089um, except two 0.08um edges form a convex corner. >= 0.099um
A: 
125xm5_L_2 {
@ 1.25xMn edge length when the adjacent edge length <= 0.089um, except two 0.08um edges form a convex corner. >= 0.099um
 chk_condition = LENGTH M5 <= 0.089
 err_EdgLength = LENGTH M5 < 0.099
 waive_CASE = INT (LENGTH chk_condition == 0.08) (LENGTH err_EdgLength == 0.08) < 0.005 ABUT INTERSECTING ONLY REGION
 err1_TMP_A = EXT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION
 err1_TMP_B = (INT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION) NOT INTERACT waive_CASE
 err1 = OR (EXPAND EDGE (M5 TOUCH EDGE err1_TMP_A) OUTSIDE BY 0.001 EXTEND BY 0.001) (EXPAND EDGE (M5 TOUCH EDGE err1_TMP_B) OUTSIDE BY 0.001 EXTEND BY 0.001)
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length when the adjacent edge length < 0.04um. >= 0.119um
A: 
125xm5_L_3 {
@ 1.25xMn edge length when the adjacent edge length < 0.04um. >= 0.119um
 chk_condition = LENGTH M5 < 0.04
 err_EdgLength = LENGTH M5 < 0.119
 err1_TMP_A = EXT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION
 err1_TMP_B = INT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION
 err1 = OR (EXPAND EDGE (M5 TOUCH EDGE err1_TMP_A) OUTSIDE BY 0.001 EXTEND BY 0.001) (EXPAND EDGE (M5 TOUCH EDGE err1_TMP_B) OUTSIDE BY 0.001 EXTEND BY 0.001)
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length when the adjacent line-end width < 0.06um. >= 0.159um
A: 
125xm5_L_4 {
@ 1.25xMn edge length when the adjacent line-end width < 0.06um. >= 0.159um
 chk_condition = EXPAND EDGE M5_end_060 INSIDE BY 0.001
 err_EdgLength = (M5_convex_eq_one_edges TOUCH EDGE chk_condition) NOT COIN EDGE M5_end_060
 err1 = LENGTH err_EdgLength < 0.159
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length when the adjacent line-end width < 0.08um. >= 0.109um
A:
125xm5_L_5 {
@ 1.25xMn edge length when the adjacent line-end width < 0.08um. >= 0.109um
 chk_condition = EXPAND EDGE M5_end_080 INSIDE BY 0.001
 err_EdgLength = (M5_convex_eq_one_edges TOUCH EDGE chk_condition) NOT COIN EDGE M5_end_080
 err1 = LENGTH err_EdgLength < 0.109
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length between two consecutive 90-270 degree corners >= 0.019um
A:
125xm5_L_6 {
@ 1.25xMn edge length between two consecutive 90-270 degree corners >= 0.019um
 // DRC also check the condition with at least one 90-270 degree corners
 mets_ERRS_EDGE = LENGTH M5_convex_270_90_edges < 0.019
 mets_ERRS_a = INT mets_ERRS_EDGE M5_convex_eq_one_edges < 0.005 ABUT==90 INTERSECTING ONLY REGION
 mets_ERRS_b = EXT mets_ERRS_EDGE M5_convex_eq_one_edges < 0.005 ABUT==90 INTERSECTING ONLY REGION
 err1_TMP = (M5_convex_eq_one_edges TOUCH EDGE mets_ERRS_a) OR EDGE (M5_convex_eq_one_edges TOUCH EDGE mets_ERRS_b)
 err1 = EXPAND EDGE err1_TMP INSIDE BY 0.001 CORNER FILL
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length between two consecutive 90-270 degree corners with one adjacent line end edge width < 0.08um and the other adjacent edge > 0.070um. >= 0.238um
A: 
125xm5_L_7 {
@ 1.25xMn edge length between two consecutive 90-270 degree corners with one adjacent line end edge width < 0.08um and the other adjacent edge > 0.070um. >= 0.238um
 line_CHK_a_RAW = LENGTH M5_convex_270_90_edges > 0.07 < 0.238
 line_CHK_a_TMP = EXPAND EDGE M5_end_080 INSIDE BY 0.001
 line_CHK_a = (line_CHK_a_RAW NOT TOUCH EDGE M5_end_080) TOUCH EDGE line_CHK_a_TMP
 line_CHK_b = LENGTH M5_convex_lt_two_edges > 0.07
 err1 = EXT line_CHK_b line_CHK_a < 0.005 ABUT==90 INTERSECTING REGION
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMn U-shape inner edge length between two consecutive 270-270 degree corners >= 0.08um
A: 
125xm5_L_8 {
@ 1.25xMn U-shape inner edge length between two consecutive 270-270 degree corners >= 0.08um
 err1 = LENGTH M5_convex_270_270_edges < 0.08
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 1.5um
     When:
    1. Metal branch is connected to wide metal with width and length >= 0.398um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 1.5um
    DRC flags branch that can't enclose a 0.08um*1.5um orthogonal rectangle
    ("V4_50" is mapped to "V4" in the rule name of this check)
A: 
125xm5_L_9_V4 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 1.5um
@ When:
@ 1. Metal branch is connected to wide metal with width and length >= 0.398um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 1.5um
@ DRC flags branch that can't enclose a 0.08um*1.5um orthogonal rectangle
@ ("V4_50" is mapped to "V4" in the rule name of this check)
 WIDE_M5 = (WITH WIDTH M5 > 0.398-GLOBAL_TOLERANCE) ENCLOSE RECTANGLE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M5 BY 1.5+GLOBAL_TOLERANCE INSIDE OF M5 STEP 0.025) NOT WIDE_M5) AND M5
 branch_size = INT (M5 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M5
 branch_down = (branch_real AND M4) INTERACT DVK_V4_SQ == 1
 branch_down_real = ((M5 INTERACT branch_down) AND M4) INTERACT DVK_V4_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 1.5 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M6) INTERACT (RECTANGLE V5 ASPECT == 1) == 1
 branch_up_real = ((M5 INTERACT branch_up) AND M6) INTERACT (RECTANGLE V5 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 1.5 ORTHOGONAL ONLY
 err1_down NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 1.5um
    When:
    1. Metal branch is connected to wide metal with width and length >= 0.398um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 1.5um
    DRC flags branch that can't enclose a 0.08um*1.5um orthogonal rectangle
    ("V5_50" is mapped to "V5" in the rule name of this check)
A:
125xm5_L_9_V5 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 1.5um
@ When:
@ 1. Metal branch is connected to wide metal with width and length >= 0.398um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 1.5um
@ DRC flags branch that can't enclose a 0.08um*1.5um orthogonal rectangle
@ ("V5_50" is mapped to "V5" in the rule name of this check)
 WIDE_M5 = (WITH WIDTH M5 > 0.398-GLOBAL_TOLERANCE) ENCLOSE RECTANGLE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M5 BY 1.5+GLOBAL_TOLERANCE INSIDE OF M5 STEP 0.025) NOT WIDE_M5) AND M5
 branch_size = INT (M5 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M5
 branch_down = (branch_real AND M4) INTERACT DVK_V4_SQ == 1
 branch_down_real = ((M5 INTERACT branch_down) AND M4) INTERACT DVK_V4_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 1.5 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M6) INTERACT (RECTANGLE V5 ASPECT == 1) == 1
 branch_up_real = ((M5 INTERACT branch_up) AND M6) INTERACT (RECTANGLE V5 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 1.5 ORTHOGONAL ONLY
 err2_up NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 3.6um
    When:
    1. Metal branch is connected to wide metal with width and length > 0.9um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 3.6um
    DRC flags branch that can't enclose a 0.08um*3.6um orthogonal rectangle
    ("V4_50" is mapped to "V4" in the rule name of this check)
A: 
125xm5_L_10_V4 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 3.6um
@ When:
@ 1. Metal branch is connected to wide metal with width and length > 0.9um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 3.6um
@ DRC flags branch that can't enclose a 0.08um*3.6um orthogonal rectangle
@ ("V4_50" is mapped to "V4" in the rule name of this check)
 WIDE_M5 = (WITH WIDTH M5 > 0.9) ENCLOSE RECTANGLE 0.9+GLOBAL_TOLERANCE 0.9+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M5 BY 3.6+GLOBAL_TOLERANCE INSIDE OF M5 STEP 0.025) NOT WIDE_M5) AND M5
 branch_size = INT (M5 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M5
 branch_down = (branch_real AND M4) INTERACT DVK_V4_SQ == 1
 branch_down_real = ((M5 INTERACT branch_down) AND M4) INTERACT DVK_V4_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 3.6 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M6) INTERACT (RECTANGLE V5 ASPECT == 1) == 1
 branch_up_real = ((M5 INTERACT branch_up) AND M6) INTERACT (RECTANGLE V5 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 3.6 ORTHOGONAL ONLY
 err1_down NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 3.6um
     When:
    1. Metal branch is connected to wide metal with width and length > 0.9um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 3.6um
    DRC flags branch that can't enclose a 0.08um*3.6um orthogonal rectangle
    ("V5_50" is mapped to "V5" in the rule name of this check)
A: 
125xm5_L_10_V5 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 3.6um
@ When:
@ 1. Metal branch is connected to wide metal with width and length > 0.9um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 3.6um
@ DRC flags branch that can't enclose a 0.08um*3.6um orthogonal rectangle
@ ("V5_50" is mapped to "V5" in the rule name of this check)
 WIDE_M5 = (WITH WIDTH M5 > 0.9) ENCLOSE RECTANGLE 0.9+GLOBAL_TOLERANCE 0.9+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M5 BY 3.6+GLOBAL_TOLERANCE INSIDE OF M5 STEP 0.025) NOT WIDE_M5) AND M5
 branch_size = INT (M5 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M5
 branch_down = (branch_real AND M4) INTERACT DVK_V4_SQ == 1
 branch_down_real = ((M5 INTERACT branch_down) AND M4) INTERACT DVK_V4_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 3.6 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M6) INTERACT (RECTANGLE V5 ASPECT == 1) == 1
 branch_up_real = ((M5 INTERACT branch_up) AND M6) INTERACT (RECTANGLE V5 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 3.6 ORTHOGONAL ONLY
 err2_up NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 9um
    When:
    1. Metal branch is connected to wide metal with width and length > 1.35um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 9um
    DRC flags branch that can't enclose a 0.08um*9um orthogonal rectangle
    ("V4_50" is mapped to "V4" in the rule name of this check)
A: 
125xm5_L_11_V4 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 9um
@ When:
@ 1. Metal branch is connected to wide metal with width and length > 1.35um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 9um
@ DRC flags branch that can't enclose a 0.08um*9um orthogonal rectangle
@ ("V4_50" is mapped to "V4" in the rule name of this check)
 WIDE_M5 = (WITH WIDTH M5 > 1.35) ENCLOSE RECTANGLE 1.35+GLOBAL_TOLERANCE 1.35+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M5 BY 9+GLOBAL_TOLERANCE INSIDE OF M5 STEP 0.025) NOT WIDE_M5) AND M5
 branch_size = INT (M5 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M5
 branch_down = (branch_real AND M4) INTERACT DVK_V4_SQ == 1
 branch_down_real = ((M5 INTERACT branch_down) AND M4) INTERACT DVK_V4_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 9 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M6) INTERACT (RECTANGLE V5 ASPECT == 1) == 1
 branch_up_real = ((M5 INTERACT branch_up) AND M6) INTERACT (RECTANGLE V5 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 9 ORTHOGONAL ONLY
 err1_down NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 9um
    When:
    1. Metal branch is connected to wide metal with width and length > 1.35um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 9um
    DRC flags branch that can't enclose a 0.08um*9um orthogonal rectangle
    ("V5_50" is mapped to "V5" in the rule name of this check)
A:
125xm5_L_11_V5 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 9um
@ When:
@ 1. Metal branch is connected to wide metal with width and length > 1.35um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 9um
@ DRC flags branch that can't enclose a 0.08um*9um orthogonal rectangle
@ ("V5_50" is mapped to "V5" in the rule name of this check)
 WIDE_M5 = (WITH WIDTH M5 > 1.35) ENCLOSE RECTANGLE 1.35+GLOBAL_TOLERANCE 1.35+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M5 BY 9+GLOBAL_TOLERANCE INSIDE OF M5 STEP 0.025) NOT WIDE_M5) AND M5
 branch_size = INT (M5 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M5
 branch_down = (branch_real AND M4) INTERACT DVK_V4_SQ == 1
 branch_down_real = ((M5 INTERACT branch_down) AND M4) INTERACT DVK_V4_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 9 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M6) INTERACT (RECTANGLE V5 ASPECT == 1) == 1
 branch_up_real = ((M5 INTERACT branch_up) AND M6) INTERACT (RECTANGLE V5 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 9 ORTHOGONAL ONLY
 err2_up NOT INSIDE SealR_NOT_BULK
}

//125xm7

Q: Length of 45-degree bent 1.25xMn, except MARKS >= 0.905um
A: 
125xm7_L_1 {
@ Length of 45-degree bent 1.25xMn, except MARKS >= 0.905um
 err1 = LENGTH M7_45_skew_edges < 0.905
 err1 NOT INSIDE EDGE MARKS
}
 
Q: 1.25xMn edge length when the adjacent edge length <= 0.089um, except two 0.08um edges form a convex corner. >= 0.099um
A: 
125xm7_L_2 {
@ 1.25xMn edge length when the adjacent edge length <= 0.089um, except two 0.08um edges form a convex corner. >= 0.099um
 chk_condition = LENGTH M7 <= 0.089
 err_EdgLength = LENGTH M7 < 0.099
 waive_CASE = INT (LENGTH chk_condition == 0.08) (LENGTH err_EdgLength == 0.08) < 0.005 ABUT INTERSECTING ONLY REGION
 err1_TMP_A = EXT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION
 err1_TMP_B = (INT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION) NOT INTERACT waive_CASE
 err1 = OR (EXPAND EDGE (M7 TOUCH EDGE err1_TMP_A) OUTSIDE BY 0.001 EXTEND BY 0.001) (EXPAND EDGE (M7 TOUCH EDGE err1_TMP_B) OUTSIDE BY 0.001 EXTEND BY 0.001)
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length when the adjacent edge length < 0.04um. >= 0.119um
A: 
125xm7_L_3 {
@ 1.25xMn edge length when the adjacent edge length < 0.04um. >= 0.119um
 chk_condition = LENGTH M7 < 0.04
 err_EdgLength = LENGTH M7 < 0.119
 err1_TMP_A = EXT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION
 err1_TMP_B = INT chk_condition err_EdgLength < 0.005 ABUT INTERSECTING ONLY REGION
 err1 = OR (EXPAND EDGE (M7 TOUCH EDGE err1_TMP_A) OUTSIDE BY 0.001 EXTEND BY 0.001) (EXPAND EDGE (M7 TOUCH EDGE err1_TMP_B) OUTSIDE BY 0.001 EXTEND BY 0.001)
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length when the adjacent line-end width < 0.06um. >= 0.159um
A:
125xm7_L_4 {
@ 1.25xMn edge length when the adjacent line-end width < 0.06um. >= 0.159um
 chk_condition = EXPAND EDGE M7_end_060 INSIDE BY 0.001
 err_EdgLength = (M7_convex_eq_one_edges TOUCH EDGE chk_condition) NOT COIN EDGE M7_end_060
 err1 = LENGTH err_EdgLength < 0.159
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length when the adjacent line-end width < 0.08um. >= 0.109um
A: 
125xm7_L_5 {
@ 1.25xMn edge length when the adjacent line-end width < 0.08um. >= 0.109um
 chk_condition = EXPAND EDGE M7_end_080 INSIDE BY 0.001
 err_EdgLength = (M7_convex_eq_one_edges TOUCH EDGE chk_condition) NOT COIN EDGE M7_end_080
 err1 = LENGTH err_EdgLength < 0.109
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length between two consecutive 90-270 degree corners >= 0.019um
A:
125xm7_L_6 {
@ 1.25xMn edge length between two consecutive 90-270 degree corners >= 0.019um
 // DRC also check the condition with at least one 90-270 degree corners
 mets_ERRS_EDGE = LENGTH M7_convex_270_90_edges < 0.019
 mets_ERRS_a = INT mets_ERRS_EDGE M7_convex_eq_one_edges < 0.005 ABUT==90 INTERSECTING ONLY REGION
 mets_ERRS_b = EXT mets_ERRS_EDGE M7_convex_eq_one_edges < 0.005 ABUT==90 INTERSECTING ONLY REGION
 err1_TMP = (M7_convex_eq_one_edges TOUCH EDGE mets_ERRS_a) OR EDGE (M7_convex_eq_one_edges TOUCH EDGE mets_ERRS_b)
 err1 = EXPAND EDGE err1_TMP INSIDE BY 0.001 CORNER FILL
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMn edge length between two consecutive 90-270 degree corners with one adjacent line end edge width < 0.08um and the other adjacent edge > 0.070um. >= 0.238um
A: 
125xm7_L_7 {
@ 1.25xMn edge length between two consecutive 90-270 degree corners with one adjacent line end edge width < 0.08um and the other adjacent edge > 0.070um. >= 0.238um
 line_CHK_a_RAW = LENGTH M7_convex_270_90_edges > 0.07 < 0.238
 line_CHK_a_TMP = EXPAND EDGE M7_end_080 INSIDE BY 0.001
 line_CHK_a = (line_CHK_a_RAW NOT TOUCH EDGE M7_end_080) TOUCH EDGE line_CHK_a_TMP
 line_CHK_b = LENGTH M7_convex_lt_two_edges > 0.07
 err1 = EXT line_CHK_b line_CHK_a < 0.005 ABUT==90 INTERSECTING REGION
 err1 NOT INSIDE SealR_NOT_BULK
}
 
Q: 1.25xMn U-shape inner edge length between two consecutive 270-270 degree corners >= 0.08um
A: 
125xm7_L_8 {
@ 1.25xMn U-shape inner edge length between two consecutive 270-270 degree corners >= 0.08um
 err1 = LENGTH M7_convex_270_270_edges < 0.08
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 1.5um
    When:
    1. Metal branch is connected to wide metal with width and length >= 0.398um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 1.5um
    DRC flags branch that can't enclose a 0.08um*1.5um orthogonal rectangle
    ("V6_50" is mapped to "V6" in the rule name of this check)
A: 
125xm7_L_9_V6 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 1.5um
@ When:
@ 1. Metal branch is connected to wide metal with width and length >= 0.398um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 1.5um
@ DRC flags branch that can't enclose a 0.08um*1.5um orthogonal rectangle
@ ("V6_50" is mapped to "V6" in the rule name of this check)
 WIDE_M7 = (WITH WIDTH M7 > 0.398-GLOBAL_TOLERANCE) ENCLOSE RECTANGLE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M7 BY 1.5+GLOBAL_TOLERANCE INSIDE OF M7 STEP 0.025) NOT WIDE_M7) AND M7
 branch_size = INT (M7 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M7
 branch_down = (branch_real AND M6) INTERACT DVK_V6_SQ == 1
 branch_down_real = ((M7 INTERACT branch_down) AND M6) INTERACT DVK_V6_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 1.5 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M8) INTERACT (RECTANGLE V7 ASPECT == 1) == 1
 branch_up_real = ((M7 INTERACT branch_up) AND M8) INTERACT (RECTANGLE V7 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 1.5 ORTHOGONAL ONLY
 err1_down NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 1.5um
    When:
    1. Metal branch is connected to wide metal with width and length >= 0.398um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 1.5um
    DRC flags branch that can't enclose a 0.08um*1.5um orthogonal rectangle
    ("TV2" is mapped to "V7" in the rule name of this check)
A: 
125xm7_L_9_V7 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 1.5um
@ When:
@ 1. Metal branch is connected to wide metal with width and length >= 0.398um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 1.5um
@ DRC flags branch that can't enclose a 0.08um*1.5um orthogonal rectangle
@ ("TV2" is mapped to "V7" in the rule name of this check)
 WIDE_M7 = (WITH WIDTH M7 > 0.398-GLOBAL_TOLERANCE) ENCLOSE RECTANGLE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE 0.398-GLOBAL_TOLERANCE+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M7 BY 1.5+GLOBAL_TOLERANCE INSIDE OF M7 STEP 0.025) NOT WIDE_M7) AND M7
 branch_size = INT (M7 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M7
 branch_down = (branch_real AND M6) INTERACT DVK_V6_SQ == 1
 branch_down_real = ((M7 INTERACT branch_down) AND M6) INTERACT DVK_V6_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 1.5 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M8) INTERACT (RECTANGLE V7 ASPECT == 1) == 1
 branch_up_real = ((M7 INTERACT branch_up) AND M8) INTERACT (RECTANGLE V7 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 1.5 ORTHOGONAL ONLY
 err2_up NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 3.6um
    When:
    1. Metal branch is connected to wide metal with width and length > 0.9um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 3.6um
    DRC flags branch that can't enclose a 0.08um*3.6um orthogonal rectangle
    ("V6_50" is mapped to "V6" in the rule name of this check)
A: 
125xm7_L_10_V6 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 3.6um
@ When:
@ 1. Metal branch is connected to wide metal with width and length > 0.9um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 3.6um
@ DRC flags branch that can't enclose a 0.08um*3.6um orthogonal rectangle
@ ("V6_50" is mapped to "V6" in the rule name of this check)
 WIDE_M7 = (WITH WIDTH M7 > 0.9) ENCLOSE RECTANGLE 0.9+GLOBAL_TOLERANCE 0.9+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M7 BY 3.6+GLOBAL_TOLERANCE INSIDE OF M7 STEP 0.025) NOT WIDE_M7) AND M7
 branch_size = INT (M7 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M7
 branch_down = (branch_real AND M6) INTERACT DVK_V6_SQ == 1
 branch_down_real = ((M7 INTERACT branch_down) AND M6) INTERACT DVK_V6_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 3.6 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M8) INTERACT (RECTANGLE V7 ASPECT == 1) == 1
 branch_up_real = ((M7 INTERACT branch_up) AND M8) INTERACT (RECTANGLE V7 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 3.6 ORTHOGONAL ONLY
 err1_down NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 3.6um
    When:
    1. Metal branch is connected to wide metal with width and length > 0.9um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 3.6um
    DRC flags branch that can't enclose a 0.08um*3.6um orthogonal rectangle
    ("TV2" is mapped to "V7" in the rule name of this check)
A:
125xm7_L_10_V7 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 3.6um
@ When:
@ 1. Metal branch is connected to wide metal with width and length > 0.9um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 3.6um
@ DRC flags branch that can't enclose a 0.08um*3.6um orthogonal rectangle
@ ("TV2" is mapped to "V7" in the rule name of this check)
 WIDE_M7 = (WITH WIDTH M7 > 0.9) ENCLOSE RECTANGLE 0.9+GLOBAL_TOLERANCE 0.9+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M7 BY 3.6+GLOBAL_TOLERANCE INSIDE OF M7 STEP 0.025) NOT WIDE_M7) AND M7
 branch_size = INT (M7 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M7
 branch_down = (branch_real AND M6) INTERACT DVK_V6_SQ == 1
 branch_down_real = ((M7 INTERACT branch_down) AND M6) INTERACT DVK_V6_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 3.6 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M8) INTERACT (RECTANGLE V7 ASPECT == 1) == 1
 branch_up_real = ((M7 INTERACT branch_up) AND M8) INTERACT (RECTANGLE V7 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 3.6 ORTHOGONAL ONLY
 err2_up NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 9um
    When:
    1. Metal branch is connected to wide metal with width and length > 1.35um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 9um
    DRC flags branch that can't enclose a 0.08um*9um orthogonal rectangle
    ("V6_50" is mapped to "V6" in the rule name of this check)
A: 
125xm7_L_11_V6 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 9um
@ When:
@ 1. Metal branch is connected to wide metal with width and length > 1.35um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 9um
@ DRC flags branch that can't enclose a 0.08um*9um orthogonal rectangle
@ ("V6_50" is mapped to "V6" in the rule name of this check)
 WIDE_M7 = (WITH WIDTH M7 > 1.35) ENCLOSE RECTANGLE 1.35+GLOBAL_TOLERANCE 1.35+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M7 BY 9+GLOBAL_TOLERANCE INSIDE OF M7 STEP 0.025) NOT WIDE_M7) AND M7
 branch_size = INT (M7 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M7
 branch_down = (branch_real AND M6) INTERACT DVK_V6_SQ == 1
 branch_down_real = ((M7 INTERACT branch_down) AND M6) INTERACT DVK_V6_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 9 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M8) INTERACT (RECTANGLE V7 ASPECT == 1) == 1
 branch_up_real = ((M7 INTERACT branch_up) AND M8) INTERACT (RECTANGLE V7 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 9 ORTHOGONAL ONLY
 err1_down NOT INSIDE SealR_NOT_BULK
}
 
Q: Length of 1.25xMn metal branch (width <= 0.269um) >= 9um
    When:
    1. Metal branch is connected to wide metal with width and length > 1.35um
    2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 9um
    DRC flags branch that can't enclose a 0.08um*9um orthogonal rectangle
    ("TV2" is mapped to "V7" in the rule name of this check)
A: 
125xm7_L_11_V7 {
@ Length of 1.25xMn metal branch (width <= 0.269um) >= 9um
@ When:
@ 1. Metal branch is connected to wide metal with width and length > 1.35um
@ 2. One square 1.25xVn-1/1.25xVn in metal branch, and space to wide metal <= 9um
@ DRC flags branch that can't enclose a 0.08um*9um orthogonal rectangle
@ ("TV2" is mapped to "V7" in the rule name of this check)
 WIDE_M7 = (WITH WIDTH M7 > 1.35) ENCLOSE RECTANGLE 1.35+GLOBAL_TOLERANCE 1.35+GLOBAL_TOLERANCE
 branch_all = ((SIZE WIDE_M7 BY 9+GLOBAL_TOLERANCE INSIDE OF M7 STEP 0.025) NOT WIDE_M7) AND M7
 branch_size = INT (M7 INTERACT branch_all) < 0.269+GLOBAL_TOLERANCE ABUT<90 OPPOSITE REGION EXCLUDE SHIELDED
 branch_real = branch_size INTERACT WIDE_M7
 branch_down = (branch_real AND M6) INTERACT DVK_V6_SQ == 1
 branch_down_real = ((M7 INTERACT branch_down) AND M6) INTERACT DVK_V6_SQ == 1
 branch_down_err1 = branch_real NOT OUTSIDE branch_down_real
 err1_down = branch_down_err1 NOT ENCLOSE RECTANGLE 0.08 9 ORTHOGONAL ONLY
 // 
 branch_up = (branch_real AND M8) INTERACT (RECTANGLE V7 ASPECT == 1) == 1
 branch_up_real = ((M7 INTERACT branch_up) AND M8) INTERACT (RECTANGLE V7 ASPECT == 1) == 1
 branch_up_err2 = branch_real NOT OUTSIDE branch_up_real
 err2_up = branch_up_err2 NOT ENCLOSE RECTANGLE 0.08 9 ORTHOGONAL ONLY
 err2_up NOT INSIDE SealR_NOT_BULK
}


//HR

Q: Length of DIR or DIRDMP >= 0.61um
A: 
HR_L_1 {
@ Length of DIR or DIRDMP >= 0.61um
 err1 = LENGTH DIR_L_edges < 0.61
 err2 = LENGTH DIRDMP_L_edges < 0.61
 err3 = LENGTH (DIR TOUCH EDGE (DIR INSIDE EDGE RESP2)) < 0.61
 err4 = LENGTH (DIRDMP TOUCH EDGE (DIRDMP INSIDE EDGE RESP2)) < 0.61
 err1 NOT INSIDE EDGE SealR_NOT_BULK
 err2 NOT INSIDE EDGE SealR_NOT_BULK
 err3 NOT INSIDE EDGE SealR_NOT_BULK
 err4 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: Length of high R resistor (DIR AND RESP2) >= 0.36um
A: 
HR_L_1_1 {
@ Length of high R resistor (DIR AND RESP2) >= 0.36um
 err1 = LENGTH (DIR_AND_RESP2 COIN EDGE DIR_L_edges) < 0.36
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}

Q: Maximum length of high R resistor (DIR AND RESP2) <= 25um
A: 
HR_L_2 {
@ Maximum length of high R resistor (DIR AND RESP2) <= 25um
 err1 = LENGTH DIR_AND_RESP2 > 25
 err1 NOT INSIDE EDGE SealR_NOT_BULK
}



